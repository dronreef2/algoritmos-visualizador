"""
INTERFACE PRINCIPAL - M√≥dulo 5: Redes Neurais
===========================================

Interface Streamlit integrada para o m√≥dulo de redes neurais,
combinando visualiza√ß√µes, exerc√≠cios e integra√ß√µes MCP.
"""

import streamlit as st
import numpy as np
import pandas as pd
from typing import Dict, List, Optional, Any, Tuple
import time

# Importa√ß√µes do m√≥dulo
from .otimizadores import GradienteDescendente, SGD, Adam, otimizar_rede_simples
from .visualizacoes import (
    plot_curva_erro_2d, plot_convergencia, plot_parametros,
    criar_animacao_otimizacao
)
from .exercicios import (
    ExercicioGradienteDescendente, ExercicioFuncaoPerda,
    ExercicioOtimizadorComparacao, criar_interface_exercicio,
    mostrar_dashboard_exercicios
)

# Importa√ß√µes de integra√ß√µes MCP (se dispon√≠veis)
try:
    from gitmcp_integration import GitMCPIntegration
    MCP_AVAILABLE = True
except ImportError:
    MCP_AVAILABLE = False


class ModuloRedesNeurais:
    """
    Classe principal para o m√≥dulo de redes neurais.
    """

    def __init__(self):
        self.dados_exemplo = self._gerar_dados_exemplo()

    def _gerar_dados_exemplo(self) -> Tuple[np.ndarray, np.ndarray]:
        """Gera dados de exemplo para demonstra√ß√µes."""
        np.random.seed(42)
        X = np.random.randn(50, 1) * 2
        y = 2 * X.flatten() + 1 + np.random.randn(50) * 0.5
        return X, y

    def mostrar_interface_principal(self):
        """Mostra a interface principal do m√≥dulo."""
        st.title("üß† Redes Neurais: Otimiza√ß√£o Visual")
        st.markdown("""
        Explore visualmente como algoritmos de otimiza√ß√£o ajustam os par√¢metros
        de redes neurais para minimizar fun√ß√µes de perda.
        """)

        # Sidebar com navega√ß√£o
        with st.sidebar:
            st.header("üéØ Navega√ß√£o")
            pagina = st.radio(
                "Selecione uma se√ß√£o:",
                ["üìä Visualiza√ß√£o Interativa", "üéÆ Exerc√≠cios Pr√°ticos", "üìö Exemplos do GitHub", "‚öôÔ∏è Configura√ß√µes"],
                key="nav_redes"
            )

        # Conte√∫do principal baseado na sele√ß√£o
        if pagina == "üìä Visualiza√ß√£o Interativa":
            self._mostrar_visualizacoes()
        elif pagina == "üéÆ Exerc√≠cios Pr√°ticos":
            self._mostrar_exercicios()
        elif pagina == "üìö Exemplos do GitHub":
            self._mostrar_exemplos_github()
        elif pagina == "‚öôÔ∏è Configura√ß√µes":
            self._mostrar_configuracoes()

    def _mostrar_visualizacoes(self):
        """Mostra interface de visualiza√ß√µes interativas."""
        st.header("üìä Visualiza√ß√£o da Curva de Erro")

        col1, col2 = st.columns([1, 1])

        with col1:
            st.subheader("‚öôÔ∏è Configura√ß√µes da Otimiza√ß√£o")

            # Sele√ß√£o de otimizador
            otimizador_tipo = st.selectbox(
                "Algoritmo de Otimiza√ß√£o:",
                ["Gradiente Descendente", "SGD", "Adam"],
                key="otimizador_select"
            )

            # Par√¢metros
            learning_rate = st.slider(
                "Taxa de Aprendizado (lr):",
                min_value=0.001, max_value=1.0, value=0.1, step=0.001,
                format="%.3f", key="lr_slider"
            )

            num_epocas = st.slider(
                "N√∫mero de √âpocas:",
                min_value=10, max_value=200, value=50, step=10,
                key="epocas_slider"
            )

            # Par√¢metros espec√≠ficos
            momentum = 0.0
            if otimizador_tipo == "SGD":
                momentum = st.slider(
                    "Momentum:",
                    min_value=0.0, max_value=0.9, value=0.0, step=0.1,
                    key="momentum_slider"
                )

            # Bot√£o de execu√ß√£o
            executar = st.button("üöÄ Executar Otimiza√ß√£o", key="executar_otimizacao")

        with col2:
            st.subheader("üìà Resultados")

            if executar:
                with st.spinner("Executando otimiza√ß√£o..."):
                    # Cria otimizador
                    if otimizador_tipo == "Gradiente Descendente":
                        otimizador = GradienteDescendente(learning_rate=learning_rate)
                    elif otimizador_tipo == "SGD":
                        otimizador = SGD(learning_rate=learning_rate, momentum=momentum)
                    else:  # Adam
                        otimizador = Adam(learning_rate=learning_rate)

                    # Executa otimiza√ß√£o
                    historico = otimizar_rede_simples(
                        self.dados_exemplo[0], self.dados_exemplo[1],
                        otimizador, num_epocas
                    )

                    # Salva no session_state
                    st.session_state.historico_otimizacao = historico
                    st.session_state.otimizador_usado = otimizador_tipo

                st.success("Otimiza√ß√£o conclu√≠da!")

            # Mostra resultados se dispon√≠veis
            if 'historico_otimizacao' in st.session_state:
                historico = st.session_state.historico_otimizacao
                otimizador_usado = st.session_state.otimizador_usado

                # M√©tricas
                perda_inicial = historico['loss'][0]
                perda_final = historico['loss'][-1]
                melhoria = ((perda_inicial - perda_final) / perda_inicial) * 100

                col_a, col_b, col_c = st.columns(3)
                with col_a:
                    st.metric("Perda Inicial", f"{perda_inicial:.4f}")
                with col_b:
                    st.metric("Perda Final", f"{perda_final:.4f}")
                with col_c:
                    st.metric("Melhoria", f"{melhoria:.1f}%")

                # Gr√°ficos
                tab1, tab2, tab3, tab4 = st.tabs(["üóª Curva 3D", "üìâ Converg√™ncia", "üìä Par√¢metros", "üé¨ Anima√ß√£o"])

                with tab1:
                    fig_3d = plot_curva_erro_2d(
                        historico, self.dados_exemplo[0], self.dados_exemplo[1],
                        f"Trajet√≥ria - {otimizador_usado}"
                    )
                    st.plotly_chart(fig_3d, use_container_width=True)

                with tab2:
                    fig_conv = plot_convergencia(historico, f"Converg√™ncia - {otimizador_usado}")
                    st.plotly_chart(fig_conv, use_container_width=True)

                with tab3:
                    fig_params = plot_parametros(historico, f"Par√¢metros - {otimizador_usado}")
                    st.plotly_chart(fig_params, use_container_width=True)

                with tab4:
                    fig_anim = criar_animacao_otimizacao(
                        historico, self.dados_exemplo[0], self.dados_exemplo[1],
                        f"Anima√ß√£o - {otimizador_usado}"
                    )
                    st.plotly_chart(fig_anim, use_container_width=True)

    def _mostrar_exercicios(self):
        """Mostra interface de exerc√≠cios pr√°ticos."""
        st.header("üéÆ Exerc√≠cios Interativos")

        # Dashboard de progresso
        mostrar_dashboard_exercicios()

        st.divider()

        # Sele√ß√£o de exerc√≠cio
        exercicio_opcao = st.selectbox(
            "Escolha um exerc√≠cio:",
            ["Gradiente Descendente B√°sico", "Fun√ß√£o de Perda MSE", "Compara√ß√£o de Otimizadores"],
            key="exercicio_select"
        )

        # Cria inst√¢ncia do exerc√≠cio
        if exercicio_opcao == "Gradiente Descendente B√°sico":
            exercicio = ExercicioGradienteDescendente()
        elif exercicio_opcao == "Fun√ß√£o de Perda MSE":
            exercicio = ExercicioFuncaoPerda()
        else:
            exercicio = ExercicioOtimizadorComparacao()

        # Interface do exerc√≠cio
        criar_interface_exercicio(exercicio)

    def _mostrar_exemplos_github(self):
        """Mostra exemplos de redes neurais do GitHub."""
        st.header("üìö Exemplos Reais do GitHub")

        if not MCP_AVAILABLE:
            st.warning("Integra√ß√£o MCP n√£o dispon√≠vel. Instale as depend√™ncias necess√°rias.")
            return

        # Interface de busca
        col1, col2 = st.columns([2, 1])

        with col1:
            query = st.text_input(
                "Buscar exemplos de redes neurais:",
                value="neural network optimization",
                key="github_query"
            )

        with col2:
            buscar = st.button("üîç Buscar", key="buscar_github")

        if buscar and query:
            with st.spinner("Buscando no GitHub..."):
                git_client = GitMCPIntegration()

                # Busca documenta√ß√£o
                resultado = git_client.buscar_documentacao_algoritmo(query)

                if resultado and resultado.get('status') == 'success':
                    docs = resultado.get('documentacao', [])

                    if docs:
                        st.success(f"Encontrados {len(docs)} exemplos!")

                        for i, doc in enumerate(docs[:5]):  # Mostra top 5
                            with st.expander(f"üìÑ {doc.get('title', f'Exemplo {i+1}')}"):
                                st.write(doc.get('description', 'Sem descri√ß√£o'))
                                if 'url' in doc:
                                    st.markdown(f"[Ver no GitHub]({doc['url']})")
                    else:
                        st.info("Nenhum exemplo encontrado. Tente uma busca diferente.")
                else:
                    st.error("Erro na busca. Verifique sua conex√£o e token do GitHub.")

    def _mostrar_configuracoes(self):
        """Mostra configura√ß√µes do m√≥dulo."""
        st.header("‚öôÔ∏è Configura√ß√µes")

        st.subheader("üé® Visualiza√ß√£o")
        tema_grafico = st.selectbox(
            "Tema dos gr√°ficos:",
            ["plotly", "plotly_white", "plotly_dark"],
            key="tema_grafico"
        )

        st.subheader("üéÆ Exerc√≠cios")
        mostrar_dicas = st.checkbox("Mostrar dicas automaticamente", value=True, key="mostrar_dicas")
        salvar_progresso = st.checkbox("Salvar progresso automaticamente", value=True, key="salvar_progresso")

        st.subheader("ü§ñ Integra√ß√µes")
        if MCP_AVAILABLE:
            st.success("‚úÖ Integra√ß√µes MCP dispon√≠veis")
            usar_cache_mcp = st.checkbox("Usar cache para buscas MCP", value=True, key="cache_mcp")
        else:
            st.warning("‚ùå Integra√ß√µes MCP n√£o dispon√≠veis")
            st.info("Para habilitar: pip install -r requirements_mcp.txt")

        # Bot√£o de reset
        if st.button("üîÑ Resetar Configura√ß√µes", key="reset_config"):
            # Reset logic here
            st.success("Configura√ß√µes resetadas!")


# Fun√ß√£o principal para integra√ß√£o com app_integrada.py
def criar_modulo_redes_neurais():
    """Cria inst√¢ncia do m√≥dulo de redes neurais."""
    return ModuloRedesNeurais()


# Para execu√ß√£o independente
if __name__ == "__main__":
    modulo = ModuloRedesNeurais()
    modulo.mostrar_interface_principal()