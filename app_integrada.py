"""
üéØ ALGORITMOS VISUALIZADOR - APLICA√á√ÉO INTEGRADA
===============================================

Aplica√ß√£o Streamlit completa e integrada que combina todos os m√≥dulos
do projeto em uma experi√™ncia unificada de aprendizado.

Funcionalidades Integradas:
- ‚úÖ M√≥dulo 1: Fundamentos (Busca Bin√°ria, Dois Ponteiros, etc.)
- ‚úÖ M√≥dulo 2: Estruturas de Dados (Heap, Trie, Union-Find, etc.)
- ‚úÖ M√≥dulo 3: Programa√ß√£o Din√¢mica (Metodologia 3 Passos)
- ‚úÖ M√≥dulo 4: Entrevistas T√©cnicas (Simula√ß√£o completa)
- ‚úÖ üéØ Aprendizado Contextualizado (Jornadas tem√°ticas)
- ‚úÖ üéØ Exerc√≠cios Pr√°ticos Interativos
- ‚úÖ ü§ñ Busca MCP com Tavily (Busca inteligente)
- ‚úÖ üìä Visualiza√ß√µes interativas
- ‚úÖ üìà Sistema de progresso e conquistas
- ‚úÖ üé® Interface moderna e responsiva

Autor: GitHub Copilot
Data: 2025
"""

import streamlit as st
import sys
import os
from pathlib import Path
import time
import random
from datetime import datetime, timedelta
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import plotly.graph_objects as go
import plotly.express as px
from typing import Dict, List, Optional, Any, Tuple

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="üéØ Algoritmos Visualizador Integrado",
    page_icon="üéØ",
    layout="wide",
    initial_sidebar_state="expanded",
    menu_items={
        'Get Help': 'https://github.com/dronreef2/algoritmos-visualizador',
        'Report a bug': 'https://github.com/dronreef2/algoritmos-visualizador/issues',
        'About': '''
        ### üéØ Algoritmos Visualizador

        Uma plataforma completa para aprendizado de algoritmos e estruturas de dados
        com visualiza√ß√µes interativas, exerc√≠cios pr√°ticos e integra√ß√£o com IA.

        **Vers√£o:** 2.0 - Integrada
        **Autor:** GitHub Copilot
        **Data:** 2025
        '''
    }
)

# Adicionar caminhos dos m√≥dulos ao sys.path
project_root = Path(__file__).parent
sys.path.extend([
    str(project_root),
    str(project_root / "modulo_1_fundamentos"),
    str(project_root / "modulo_2_estruturas_dados"),
    str(project_root / "modulo_3_programacao_dinamica"),
    str(project_root / "modulo_4_entrevistas"),
])

# ============================================================================
# üé® CSS CUSTOMIZADO PARA INTERFACE MODERNA
# ============================================================================

def load_css():
    """Carrega estilos CSS customizados para interface moderna."""
    st.markdown("""
    <style>
    /* Reset e vari√°veis CSS */
    :root {
        --primary-color: #2E86AB;
        --secondary-color: #A23B72;
        --accent-color: #F18F01;
        --success-color: #4CAF50;
        --warning-color: #FF9800;
        --error-color: #F44336;
        --background-light: #f8f9fa;
        --text-primary: #212529;
        --text-secondary: #6c757d;
        --border-radius: 12px;
        --shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        --shadow-hover: 0 8px 16px rgba(0, 0, 0, 0.15);
    }

    /* Header principal */
    .main-header {
        background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
        color: white;
        padding: 2rem;
        border-radius: var(--border-radius);
        text-align: center;
        margin-bottom: 2rem;
        box-shadow: var(--shadow);
    }

    .main-header h1 {
        font-size: 3rem;
        margin-bottom: 0.5rem;
        font-weight: 700;
    }

    .main-header p {
        font-size: 1.2rem;
        opacity: 0.9;
        margin: 0;
    }

    /* Cards de m√≥dulo */
    .module-card {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 1.5rem;
        border-radius: var(--border-radius);
        margin: 1rem 0;
        box-shadow: var(--shadow);
        transition: all 0.3s ease;
        border: 2px solid transparent;
    }

    .module-card:hover {
        transform: translateY(-5px);
        box-shadow: var(--shadow-hover);
        border-color: var(--accent-color);
    }

    .module-card h3 {
        margin-top: 0;
        font-size: 1.5rem;
        font-weight: 600;
    }

    .module-card p {
        margin: 0.5rem 0;
        opacity: 0.9;
    }

    .module-card ul {
        margin: 1rem 0 0 0;
        padding-left: 1.2rem;
    }

    .module-card li {
        margin: 0.3rem 0;
        font-size: 0.9rem;
    }

    /* Cards de funcionalidade */
    .feature-card {
        background: white;
        border: 2px solid #e9ecef;
        border-radius: var(--border-radius);
        padding: 1.5rem;
        margin: 1rem 0;
        box-shadow: var(--shadow);
        transition: all 0.3s ease;
    }

    .feature-card:hover {
        border-color: var(--primary-color);
        box-shadow: var(--shadow-hover);
    }

    .feature-card h4 {
        color: var(--primary-color);
        margin-top: 0;
        font-size: 1.3rem;
        font-weight: 600;
    }

    /* Cards m√©tricos */
    .metric-card {
        background: var(--background-light);
        border-left: 4px solid var(--primary-color);
        border-radius: var(--border-radius);
        padding: 1rem;
        margin: 0.5rem 0;
        box-shadow: var(--shadow);
    }

    .metric-card h5 {
        margin: 0;
        color: var(--text-primary);
        font-size: 1rem;
        font-weight: 600;
    }

    .metric-card p {
        margin: 0.3rem 0 0 0;
        color: var(--text-secondary);
        font-size: 0.9rem;
    }

    /* Cards de exerc√≠cio */
    .exercise-card {
        background: linear-gradient(135deg, #ff9a9e 0%, #fecfef 50%, #fecfef 100%);
        border: 2px solid var(--accent-color);
        border-radius: var(--border-radius);
        padding: 1.5rem;
        margin: 1rem 0;
        box-shadow: var(--shadow);
        transition: all 0.3s ease;
    }

    .exercise-card:hover {
        transform: translateY(-3px);
        box-shadow: var(--shadow-hover);
    }

    /* Status badges */
    .status-badge {
        display: inline-block;
        padding: 0.25rem 0.75rem;
        border-radius: 20px;
        font-size: 0.8rem;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    .status-success {
        background: var(--success-color);
        color: white;
    }

    .status-warning {
        background: var(--warning-color);
        color: white;
    }

    .status-info {
        background: var(--primary-color);
        color: white;
    }

    /* Bot√µes customizados */
    .custom-button {
        background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
        color: white;
        border: none;
        border-radius: var(--border-radius);
        padding: 0.75rem 1.5rem;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        text-decoration: none;
        display: inline-block;
        text-align: center;
    }

    .custom-button:hover {
        transform: translateY(-2px);
        box-shadow: var(--shadow-hover);
    }

    /* Sidebar customizada */
    .sidebar-header {
        background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
        color: white;
        padding: 1rem;
        border-radius: var(--border-radius);
        margin-bottom: 1rem;
        text-align: center;
    }

    .sidebar-header h3 {
        margin: 0;
        font-size: 1.2rem;
        font-weight: 600;
    }

    /* Anima√ß√µes */
    @keyframes fadeIn {
        from { opacity: 0; transform: translateY(20px); }
        to { opacity: 1; transform: translateY(0); }
    }

    .fade-in {
        animation: fadeIn 0.6s ease-out;
    }

    /* Responsividade */
    @media (max-width: 768px) {
        .main-header h1 {
            font-size: 2rem;
        }

        .module-card {
            padding: 1rem;
        }

        .feature-card {
            padding: 1rem;
        }
    }

    /* Scrollbar customizada */
    ::-webkit-scrollbar {
        width: 8px;
    }

    ::-webkit-scrollbar-track {
        background: var(--background-light);
    }

    ::-webkit-scrollbar-thumb {
        background: var(--primary-color);
        border-radius: 4px;
    }

    ::-webkit-scrollbar-thumb:hover {
        background: var(--secondary-color);
    }

    /* Loading spinner */
    .loading-spinner {
        display: inline-block;
        width: 20px;
        height: 20px;
        border: 3px solid rgba(255, 255, 255, 0.3);
        border-radius: 50%;
        border-top-color: white;
        animation: spin 1s ease-in-out infinite;
    }

    @keyframes spin {
        to { transform: rotate(360deg); }
    }
    </style>
    """, unsafe_allow_html=True)

# ============================================================================
# üîß UTILIT√ÅRIOS E HELPERS
# ============================================================================

def initialize_session_state():
    """Inicializa o estado da sess√£o com valores padr√£o."""
    if 'user_progress' not in st.session_state:
        st.session_state.user_progress = {
            'completed_modules': [],
            'completed_exercises': [],
            'current_streak': 0,
            'total_study_time': 0,
            'achievements': [],
            'last_activity': datetime.now()
        }

    if 'current_module' not in st.session_state:
        st.session_state.current_module = "üè† Home"

    if 'exercise_session' not in st.session_state:
        st.session_state.exercise_session = None

def get_module_info(module_key: str) -> Dict[str, Any]:
    """Retorna informa√ß√µes detalhadas sobre um m√≥dulo."""
    modules_info = {
        "üìö M√≥dulo 1: Fundamentos": {
            "title": "Fundamentos do Pensamento Algor√≠tmico",
            "description": "Domine as t√©cnicas algor√≠tmicas essenciais que servem como blocos de constru√ß√£o para problemas mais complexos.",
            "topics": [
                "üîç Busca Bin√°ria - O(log n)",
                "üë• Dois Ponteiros - O(n)",
                "ü™ü Janela Deslizante - O(n)",
                "üîÑ Backtracking - Exponencial",
                "üåê BFS (Busca em Largura)",
                "üìä Otimiza√ß√£o de Arrays",
                "üî¢ Opera√ß√µes com Bits"
            ],
            "difficulty": "Iniciante a Intermedi√°rio",
            "estimated_time": "15-20 horas",
            "applications": [
                "Sistemas de busca em logs",
                "Detector de fraudes banc√°rias",
                "An√°lise de sequ√™ncias de DNA",
                "Planejador de turnos",
                "Redes sociais"
            ]
        },
        "üèóÔ∏è M√≥dulo 2: Estruturas de Dados": {
            "title": "Estruturas de Dados Avan√ßadas",
            "description": "Explore estruturas de dados complexas com visualiza√ß√µes detalhadas e aplica√ß√µes pr√°ticas.",
            "topics": [
                "üî∫ Heap (Min/Max)",
                "üå≥ Trie (√Årvore de Prefixos)",
                "ü§ù Union-Find",
                "üìä Segment Tree",
                "üîó Listas Encadeadas",
                "üìö Tabelas Hash",
                "üóÇÔ∏è √Årvores Bin√°rias"
            ],
            "difficulty": "Intermedi√°rio a Avan√ßado",
            "estimated_time": "20-25 horas",
            "applications": [
                "Sistemas de cache inteligentes",
                "Motores de busca",
                "Sistemas de recomenda√ß√£o",
                "Gerenciamento de mem√≥ria",
                "Bancos de dados"
            ]
        },
        "üéØ M√≥dulo 3: Programa√ß√£o Din√¢mica": {
            "title": "Programa√ß√£o Din√¢mica",
            "description": "Domine a metodologia de 3 passos para resolver problemas de programa√ß√£o din√¢mica.",
            "topics": [
                "üí™ For√ßa Bruta",
                "üß† Memoiza√ß√£o",
                "üìä Tabula√ß√£o",
                "üéØ Otimiza√ß√£o",
                "üîÑ Problemas Cl√°ssicos (Knapsack, LCS)",
                "üìà Sequ√™ncias √ìtimas"
            ],
            "difficulty": "Intermedi√°rio a Avan√ßado",
            "estimated_time": "18-22 horas",
            "applications": [
                "Otimiza√ß√£o de rotas",
                "Alinhamento de sequ√™ncias",
                "Compress√£o de dados",
                "Planejamento financeiro",
                "Jogos e IA"
            ]
        },
        "üíº M√≥dulo 4: Entrevistas": {
            "title": "Entrevistas T√©cnicas",
            "description": "Simula√ß√£o completa de entrevistas t√©cnicas com feedback em tempo real.",
            "topics": [
                "üéØ Problemas Cl√°ssicos",
                "üìä An√°lise de C√≥digo",
                "‚è±Ô∏è Simula√ß√£o de Tempo",
                "üìù Feedback Detalhado",
                "üß† Estrat√©gias de Resolu√ß√£o",
                "üí° Otimiza√ß√£o de Solu√ß√µes"
            ],
            "difficulty": "Intermedi√°rio a Avan√ßado",
            "estimated_time": "12-16 horas",
            "applications": [
                "Prepara√ß√£o para entrevistas",
                "An√°lise de performance",
                "Resolu√ß√£o de problemas",
                "Otimiza√ß√£o de c√≥digo",
                "Pensamento algor√≠tmico"
            ]
        }
    }

    return modules_info.get(module_key, {})

def render_sidebar():
    """Renderiza a barra lateral com navega√ß√£o e informa√ß√µes do usu√°rio."""
    with st.sidebar:
        # Header da sidebar
        st.markdown("""
        <div class="sidebar-header">
            <h3>üß≠ Navega√ß√£o</h3>
        </div>
        """, unsafe_allow_html=True)

        # Menu principal
        menu_options = [
            "üè† Home",
            "üìö M√≥dulo 1: Fundamentos",
            "üèóÔ∏è M√≥dulo 2: Estruturas de Dados",
            "üéØ M√≥dulo 3: Programa√ß√£o Din√¢mica",
            "üíº M√≥dulo 4: Entrevistas",
            "üéØ Aprendizado Contextualizado",
            "üéØ Exerc√≠cios Pr√°ticos",
            "üîç Busca MCP (Tavily)",
            "üìä Dashboard de Progresso",
            "üèÜ Conquistas",
            "‚öôÔ∏è Configura√ß√µes"
        ]

        selected_option = st.selectbox(
            "Selecione uma se√ß√£o:",
            menu_options,
            index=menu_options.index(st.session_state.get('current_module', "üè† Home")),
            key="main_navigation"
        )

        st.session_state.current_module = selected_option

        # Separador
        st.markdown("---")

        # Informa√ß√µes do usu√°rio
        st.markdown("### üë§ Meu Progresso")

        progress = st.session_state.user_progress

        # M√©tricas r√°pidas
        col1, col2 = st.columns(2)
        with col1:
            st.metric("M√≥dulos Completados", len(progress['completed_modules']))
        with col2:
            st.metric("Sequ√™ncia Atual", progress['current_streak'])

        # Barra de progresso geral
        total_modules = 4
        completed = len(progress['completed_modules'])
        progress_percentage = (completed / total_modules) * 100

        st.markdown("**Progresso Geral:**")
        st.progress(progress_percentage / 100)

        st.markdown(f"**{completed}/{total_modules} m√≥dulos** ({progress_percentage:.1f}%)")

        # Separador
        st.markdown("---")

        # Links √∫teis
        st.markdown("### üîó Links √öteis")
        st.markdown("""
        - [üìö Documenta√ß√£o](https://github.com/dronreef2/algoritmos-visualizador)
        - [üêõ Reportar Bug](https://github.com/dronreef2/algoritmos-visualizador/issues)
        - [üí° Sugest√µes](https://github.com/dronreef2/algoritmos-visualizador/discussions)
        """)

# ============================================================================
# üè† P√ÅGINA INICIAL
# ============================================================================

def render_home_page():
    """Renderiza a p√°gina inicial com vis√£o geral completa."""
    st.markdown("""
    <div class="main-header fade-in">
        <h1>üéØ Algoritmos Visualizador Integrado</h1>
        <p>Uma experi√™ncia completa de aprendizado contextualizado com visualiza√ß√µes interativas</p>
    </div>
    """, unsafe_allow_html=True)

    # M√©tricas principais
    col1, col2, col3, col4, col5 = st.columns(5)

    with col1:
        st.markdown("""
        <div class="metric-card">
            <h5>üìö M√≥dulos</h5>
            <p>4 m√≥dulos completos</p>
        </div>
        """, unsafe_allow_html=True)

    with col2:
        st.markdown("""
        <div class="metric-card">
            <h5>üéØ Algoritmos</h5>
            <p>50+ implementados</p>
        </div>
        """, unsafe_allow_html=True)

    with col3:
        st.markdown("""
        <div class="metric-card">
            <h5>üèóÔ∏è Estruturas</h5>
            <p>15+ visualizadas</p>
        </div>
        """, unsafe_allow_html=True)

    with col4:
        st.markdown("""
        <div class="metric-card">
            <h5>üíº Problemas</h5>
            <p>25+ de entrevista</p>
        </div>
        """, unsafe_allow_html=True)

    with col5:
        st.markdown("""
        <div class="metric-card">
            <h5>üéØ Exerc√≠cios</h5>
            <p>30+ interativos</p>
        </div>
        """, unsafe_allow_html=True)

    # Destaques especiais
    st.markdown("## üåü Funcionalidades em Destaque")

    col1, col2 = st.columns(2)

    with col1:
        st.markdown("""
        <div class="feature-card">
            <h4>üéØ Aprendizado Contextualizado</h4>
            <p>Jornadas tem√°ticas com contexto hist√≥rico, aplica√ß√µes reais e conex√µes entre conceitos.</p>
            <ul>
                <li>üó∫Ô∏è Mapa visual de aprendizado</li>
                <li>üöÄ Jornadas tem√°ticas estruturadas</li>
                <li>üìö Conceitos interativos</li>
                <li>üìä Acompanhamento de progresso</li>
            </ul>
        </div>
        """, unsafe_allow_html=True)

        st.markdown("""
        <div class="exercise-card">
            <h4>üéØ Exerc√≠cios Pr√°ticos Interativos</h4>
            <p>Pratique com exerc√≠cios reais, valida√ß√£o autom√°tica e feedback imediato.</p>
            <ul>
                <li>‚úÖ M√∫ltipla escolha e verdadeiro/falso</li>
                <li>‚úÖ An√°lise de complexidade</li>
                <li>‚úÖ Debugging de c√≥digo</li>
                <li>‚úÖ Sistema de conquistas</li>
            </ul>
        </div>
        """, unsafe_allow_html=True)

    with col2:
        st.markdown("""
        <div class="feature-card">
            <h4>ü§ñ Busca Inteligente com MCP</h4>
            <p>Busque explica√ß√µes e exemplos na web usando IA integrada.</p>
            <ul>
                <li>üîç Busca contextual com Tavily</li>
                <li>üß† Respostas geradas por IA</li>
                <li>üìä Resultados personalizados</li>
                <li>‚ö° Busca avan√ßada e b√°sica</li>
            </ul>
        </div>
        """, unsafe_allow_html=True)

        st.markdown("""
        <div class="feature-card">
            <h4>üìä Visualiza√ß√µes Interativas</h4>
            <p>Veja algoritmos em a√ß√£o com anima√ß√µes passo a passo.</p>
            <ul>
                <li>üé® Gr√°ficos matplotlib/plotly</li>
                <li>üé¨ Anima√ß√µes em tempo real</li>
                <li>üìà An√°lise de complexidade</li>
                <li>üîç Explora√ß√£o detalhada</li>
            </ul>
        </div>
        """, unsafe_allow_html=True)

    # M√≥dulos dispon√≠veis
    st.markdown("## üìã M√≥dulos de Aprendizado")

    col1, col2 = st.columns(2)

    with col1:
        # M√≥dulo 1
        module_info = get_module_info("üìö M√≥dulo 1: Fundamentos")
        st.markdown(f"""
        <div class="module-card">
            <h3>üìö M√≥dulo 1: Fundamentos</h3>
            <p>{module_info.get('description', 'Algoritmos fundamentais')}</p>
            <ul>
        """, unsafe_allow_html=True)

        for topic in module_info.get('topics', [])[:4]:  # Mostra primeiros 4 t√≥picos
            st.markdown(f"<li>{topic}</li>", unsafe_allow_html=True)

        st.markdown("</ul></div>", unsafe_allow_html=True)

        # M√≥dulo 3
        module_info = get_module_info("üéØ M√≥dulo 3: Programa√ß√£o Din√¢mica")
        st.markdown(f"""
        <div class="module-card">
            <h3>üéØ M√≥dulo 3: Programa√ß√£o Din√¢mica</h3>
            <p>{module_info.get('description', 'Metodologia 3 passos')}</p>
            <ul>
        """, unsafe_allow_html=True)

        for topic in module_info.get('topics', [])[:4]:
            st.markdown(f"<li>{topic}</li>", unsafe_allow_html=True)

        st.markdown("</ul></div>", unsafe_allow_html=True)

    with col2:
        # M√≥dulo 2
        module_info = get_module_info("üèóÔ∏è M√≥dulo 2: Estruturas de Dados")
        st.markdown(f"""
        <div class="module-card">
            <h3>üèóÔ∏è M√≥dulo 2: Estruturas de Dados</h3>
            <p>{module_info.get('description', 'Estruturas avan√ßadas')}</p>
            <ul>
        """, unsafe_allow_html=True)

        for topic in module_info.get('topics', [])[:4]:
            st.markdown(f"<li>{topic}</li>", unsafe_allow_html=True)

        st.markdown("</ul></div>", unsafe_allow_html=True)

        # M√≥dulo 4
        module_info = get_module_info("üíº M√≥dulo 4: Entrevistas")
        st.markdown(f"""
        <div class="module-card">
            <h3>üíº M√≥dulo 4: Entrevistas</h3>
            <p>{module_info.get('description', 'Simula√ß√£o de entrevistas')}</p>
            <ul>
        """, unsafe_allow_html=True)

        for topic in module_info.get('topics', [])[:4]:
            st.markdown(f"<li>{topic}</li>", unsafe_allow_html=True)

        st.markdown("</ul></div>", unsafe_allow_html=True)

    # Call-to-action
    st.markdown("---")
    st.markdown("""
    <div style="text-align: center; margin: 2rem 0;">
        <h3>üöÄ Pronto para come√ßar sua jornada?</h3>
        <p>Escolha um m√≥dulo acima ou explore as funcionalidades especiais!</p>
    </div>
    """, unsafe_allow_html=True)

# ============================================================================
# üìö M√ìDULOS INDIVIDUAIS
# ============================================================================

def render_module_1():
    """Renderiza o M√≥dulo 1: Fundamentos."""
    st.markdown("""
    <div class="main-header">
        <h1>üìö M√≥dulo 1: Fundamentos</h1>
        <p>Algoritmos fundamentais que formam a base do pensamento computacional</p>
    </div>
    """, unsafe_allow_html=True)

    # Tabs do m√≥dulo
    tab1, tab2, tab3, tab4 = st.tabs([
        "üîç Busca Bin√°ria",
        "üë• Dois Ponteiros",
        "ü™ü Janela Deslizante",
        "üîÑ Backtracking"
    ])

    with tab1:
        render_busca_binaria()

    with tab2:
        render_dois_ponteiros()

    with tab3:
        render_janela_deslizante()

    with tab4:
        render_backtracking()

def render_module_2():
    """Renderiza o M√≥dulo 2: Estruturas de Dados."""
    st.markdown("""
    <div class="main-header">
        <h1>üèóÔ∏è M√≥dulo 2: Estruturas de Dados</h1>
        <p>Estruturas de dados avan√ßadas com visualiza√ß√µes interativas</p>
    </div>
    """, unsafe_allow_html=True)

    # Tabs do m√≥dulo
    tab1, tab2, tab3, tab4 = st.tabs([
        "üî∫ Heap (Min/Max)",
        "üå≥ Trie",
        "ü§ù Union-Find",
        "üìä Segment Tree"
    ])

    with tab1:
        render_heap()

    with tab2:
        render_trie()

    with tab3:
        render_union_find()

    with tab4:
        render_segment_tree()

def render_module_3():
    """Renderiza o M√≥dulo 3: Programa√ß√£o Din√¢mica."""
    st.markdown("""
    <div class="main-header">
        <h1>üéØ M√≥dulo 3: Programa√ß√£o Din√¢mica</h1>
        <p>Metodologia de 3 passos para resolver problemas complexos</p>
    </div>
    """, unsafe_allow_html=True)

    # Tabs do m√≥dulo
    tab1, tab2, tab3, tab4 = st.tabs([
        "üí™ For√ßa Bruta",
        "üß† Memoiza√ß√£o",
        "üìä Tabula√ß√£o",
        "üéØ Problemas Cl√°ssicos"
    ])

    with tab1:
        render_forca_bruta()

    with tab2:
        render_memoizacao()

    with tab3:
        render_tabulacao()

    with tab4:
        render_problemas_classicos()

def render_module_4():
    """Renderiza o M√≥dulo 4: Entrevistas."""
    st.markdown("""
    <div class="main-header">
        <h1>üíº M√≥dulo 4: Entrevistas</h1>
        <p>Simula√ß√£o completa de entrevistas t√©cnicas</p>
    </div>
    """, unsafe_allow_html=True)

    # Tabs do m√≥dulo
    tab1, tab2, tab3 = st.tabs([
        "üéØ Simula√ß√£o de Entrevista",
        "üìä An√°lise de C√≥digo",
        "üìù Feedback"
    ])

    with tab1:
        render_simulacao_entrevista()

    with tab2:
        render_analise_codigo()

    with tab3:
        render_feedback_entrevista()

# ============================================================================
# üéØ APRENDIZADO CONTEXTUALIZADO
# ============================================================================

def render_aprendizado_contextualizado():
    """Renderiza o sistema de aprendizado contextualizado."""
    try:
        from aprendizado_contextual_ui import render_aprendizado_contextual
        render_aprendizado_contextual()
    except ImportError:
        st.error("Sistema de aprendizado contextualizado n√£o dispon√≠vel.")
        st.info("Verifique se o arquivo `aprendizado_contextual_ui.py` est√° presente.")

# ============================================================================
# üéØ EXERC√çCIOS PR√ÅTICOS
# ============================================================================

def render_exercicios_praticos():
    """Renderiza o sistema de exerc√≠cios pr√°ticos."""
    try:
        from exercicios_praticos_ui import render_exercicios_praticos
        from integracao_gitmcp_exercicios import render_exercicios_gitmcp

        # Abas para exerc√≠cios tradicionais e integra√ß√£o GitHub
        tab1, tab2 = st.tabs(["üìù Exerc√≠cios Tradicionais", "üîó Exerc√≠cios com GitHub"])

        with tab1:
            render_exercicios_praticos()

        with tab2:
            render_exercicios_gitmcp()

    except ImportError:
        st.error("Sistema de exerc√≠cios pr√°ticos n√£o dispon√≠vel.")
        st.info("Verifique se o arquivo `exercicios_praticos_ui.py` est√° presente.")

# ============================================================================
# üîç BUSCA MCP
# ============================================================================

def render_busca_mcp():
    """Renderiza a interface de busca MCP com Tavily."""
    st.markdown("""
    <div class="main-header">
        <h1>üîç Busca Inteligente com MCP</h1>
        <p>Busque explica√ß√µes e exemplos usando IA integrada</p>
    </div>
    """, unsafe_allow_html=True)

    try:
        from mcp_tavily_integration import TavilySearchClient

        # Inicializar cliente
        if 'mcp_client' not in st.session_state:
            st.session_state.mcp_client = TavilySearchClient()

        client = st.session_state.mcp_client

        # Status da configura√ß√£o
        if client.is_configured():
            st.success("‚úÖ MCP Server Tavily configurado e pronto!")

            # Interface de busca
            col1, col2 = st.columns([3, 1])

            with col1:
                query = st.text_input(
                    "Digite sua consulta:",
                    placeholder="Ex: 'como funciona o algoritmo de Dijkstra?'",
                    help="Fa√ßa perguntas sobre algoritmos, estruturas de dados ou problemas de programa√ß√£o"
                )

            with col2:
                search_type = st.selectbox(
                    "Tipo de busca:",
                    ["basic", "advanced"],
                    help="Basic: busca r√°pida, Advanced: busca detalhada"
                )

                include_answer = st.checkbox(
                    "Incluir resposta da IA",
                    value=False,
                    help="Gera resposta contextualizada usando IA"
                )

                max_results = st.slider(
                    "M√°ximo de resultados:",
                    min_value=1,
                    max_value=10,
                    value=5,
                    help="N√∫mero m√°ximo de resultados"
                )

            if st.button("üîç Buscar", type="primary", use_container_width=True):
                if query.strip():
                    with st.spinner("üîÑ Buscando informa√ß√µes com IA..."):
                        try:
                            result = client.search(
                                query,
                                search_depth=search_type,
                                include_answer=include_answer,
                                max_results=max_results
                            )

                            if result and 'results' in result:
                                st.success(f"‚úÖ Encontrados {len(result['results'])} resultados!")

                                # Exibir resultados
                                for i, item in enumerate(result['results'], 1):
                                    with st.expander(f"üìÑ Resultado {i}: {item.get('title', 'Sem t√≠tulo')}"):
                                        st.markdown(f"**URL:** {item.get('url', 'N/A')}")
                                        st.markdown(f"**Conte√∫do:** {item.get('snippet', 'N/A')}")

                                # Resposta da IA se solicitada
                                if include_answer and 'answer' in result:
                                    st.markdown("---")
                                    st.markdown("### üß† Resposta da IA")
                                    st.info(result['answer'])

                            else:
                                st.warning("Nenhum resultado encontrado.")

                        except Exception as e:
                            st.error(f"Erro na busca: {str(e)}")
                else:
                    st.warning("Por favor, digite uma consulta.")
        else:
            st.warning("‚ö†Ô∏è MCP Server precisa ser configurado.")
            st.info("Para configurar: Edite `mcp-server-tavily/.env` e adicione sua chave da API Tavily")

    except ImportError:
        st.error("Integra√ß√£o MCP n√£o dispon√≠vel.")
        st.info("Verifique se o arquivo `mcp_tavily_integration.py` est√° presente.")

# ============================================================================
# üìä DASHBOARD DE PROGRESSO
# ============================================================================

def render_dashboard_progresso():
    """Renderiza o dashboard de progresso do usu√°rio."""
    st.markdown("""
    <div class="main-header">
        <h1>üìä Dashboard de Progresso</h1>
        <p>Acompanhe seu avan√ßo no aprendizado de algoritmos</p>
    </div>
    """, unsafe_allow_html=True)

    progress = st.session_state.user_progress

    # M√©tricas principais
    col1, col2, col3, col4 = st.columns(4)

    with col1:
        completed_modules = len(progress['completed_modules'])
        st.metric("M√≥dulos Completados", f"{completed_modules}/4")

    with col2:
        st.metric("Sequ√™ncia Atual", progress['current_streak'])

    with col3:
        total_time = progress['total_study_time']
        st.metric("Tempo de Estudo", f"{total_time} min")

    with col4:
        achievements = len(progress['achievements'])
        st.metric("Conquistas", achievements)

    # Gr√°fico de progresso
    st.markdown("### üìà Progresso por M√≥dulo")

    modules = ["Fundamentos", "Estruturas", "Din√¢mica", "Entrevistas"]
    completed = [1 if f"M√≥dulo {i+1}" in progress['completed_modules'] else 0 for i in range(4)]

    fig = go.Figure(data=[
        go.Bar(
            x=modules,
            y=completed,
            marker_color=['#4CAF50' if c else '#FF9800' for c in completed]
        )
    ])

    fig.update_layout(
        title="Status de Conclus√£o dos M√≥dulos",
        xaxis_title="M√≥dulos",
        yaxis_title="Status (0=N√£o Conclu√≠do, 1=Conclu√≠do)",
        yaxis=dict(tickmode='linear', tick0=0, dtick=1)
    )

    st.plotly_chart(fig, use_container_width=True)

    # Atividades recentes
    st.markdown("### üïí Atividades Recentes")

    if 'last_activity' in progress:
        st.info(f"√öltima atividade: {progress['last_activity'].strftime('%d/%m/%Y %H:%M')}")

    # Recomenda√ß√µes
    st.markdown("### üí° Recomenda√ß√µes")

    if completed_modules < 4:
        next_module = modules[completed_modules]
        st.info(f"üéØ Pr√≥ximo m√≥dulo recomendado: **{next_module}**")
    else:
        st.success("üéâ Parab√©ns! Voc√™ completou todos os m√≥dulos!")

# ============================================================================
# üèÜ SISTEMA DE CONQUISTAS
# ============================================================================

def render_conquistas():
    """Renderiza o sistema de conquistas."""
    st.markdown("""
    <div class="main-header">
        <h1>üèÜ Sistema de Conquistas</h1>
        <p>Desbloqueie conquistas enquanto aprende algoritmos</p>
    </div>
    """, unsafe_allow_html=True)

    # Conquistas dispon√≠veis
    achievements = [
        {
            "name": "Primeiro Passo",
            "description": "Complete seu primeiro exerc√≠cio",
            "icon": "üéØ",
            "unlocked": len(st.session_state.user_progress['completed_exercises']) > 0
        },
        {
            "name": "Buscador √Åvido",
            "description": "Complete o m√≥dulo de Busca Bin√°ria",
            "icon": "üîç",
            "unlocked": "M√≥dulo 1" in st.session_state.user_progress['completed_modules']
        },
        {
            "name": "Estruturador",
            "description": "Complete o m√≥dulo de Estruturas de Dados",
            "icon": "üèóÔ∏è",
            "unlocked": "M√≥dulo 2" in st.session_state.user_progress['completed_modules']
        },
        {
            "name": "Din√¢mico",
            "description": "Complete o m√≥dulo de Programa√ß√£o Din√¢mica",
            "icon": "üéØ",
            "unlocked": "M√≥dulo 3" in st.session_state.user_progress['completed_modules']
        },
        {
            "name": "Entrevistador",
            "description": "Complete o m√≥dulo de Entrevistas",
            "icon": "üíº",
            "unlocked": "M√≥dulo 4" in st.session_state.user_progress['completed_modules']
        },
        {
            "name": "Sequ√™ncia de Vit√≥rias",
            "description": "Complete 7 exerc√≠cios seguidos",
            "icon": "üî•",
            "unlocked": st.session_state.user_progress['current_streak'] >= 7
        },
        {
            "name": "Mestre dos Algoritmos",
            "description": "Complete todos os m√≥dulos",
            "icon": "üëë",
            "unlocked": len(st.session_state.user_progress['completed_modules']) == 4
        }
    ]

    # Exibir conquistas
    col1, col2, col3 = st.columns(3)

    for i, achievement in enumerate(achievements):
        col = [col1, col2, col3][i % 3]

        with col:
            if achievement["unlocked"]:
                st.markdown(f"""
                <div class="metric-card" style="border-left-color: #4CAF50;">
                    <h5>{achievement['icon']} {achievement['name']}</h5>
                    <p>{achievement['description']}</p>
                    <span class="status-badge status-success">DESBLOQUEADA</span>
                </div>
                """, unsafe_allow_html=True)
            else:
                st.markdown(f"""
                <div class="metric-card" style="border-left-color: #9E9E9E; opacity: 0.6;">
                    <h5>{achievement['icon']} {achievement['name']}</h5>
                    <p>{achievement['description']}</p>
                    <span class="status-badge status-info">BLOQUEADA</span>
                </div>
                """, unsafe_allow_html=True)

# ============================================================================
# ‚öôÔ∏è CONFIGURA√á√ïES
# ============================================================================

def render_configuracoes():
    """Renderiza a p√°gina de configura√ß√µes."""
    st.markdown("""
    <div class="main-header">
        <h1>‚öôÔ∏è Configura√ß√µes</h1>
        <p>Personalize sua experi√™ncia de aprendizado</p>
    </div>
    """, unsafe_allow_html=True)

    # Tabs de configura√ß√£o
    tab1, tab2, tab3 = st.tabs([
        "üë§ Perfil",
        "üé® Interface",
        "üìä Dados"
    ])

    with tab1:
        st.markdown("### üë§ Configura√ß√µes do Perfil")
        st.text_input("Nome", value="Estudante", help="Seu nome para personalizar a experi√™ncia")
        st.selectbox("N√≠vel de Experi√™ncia", ["Iniciante", "Intermedi√°rio", "Avan√ßado"], index=0)
        st.multiselect("Interesses", ["Algoritmos", "Estruturas de Dados", "Programa√ß√£o Din√¢mica", "Entrevistas"], default=["Algoritmos"])

    with tab2:
        st.markdown("### üé® Configura√ß√µes da Interface")
        st.selectbox("Tema", ["Claro", "Escuro", "Autom√°tico"], index=0)
        st.slider("Velocidade das Anima√ß√µes", 0.5, 2.0, 1.0, 0.1)
        st.checkbox("Mostrar Dicas", value=True)
        st.checkbox("Notifica√ß√µes de Conquistas", value=True)

    with tab3:
        st.markdown("### üìä Gerenciamento de Dados")
        if st.button("üóëÔ∏è Limpar Progresso", type="secondary", key="config_limpar_progresso"):
            st.session_state.user_progress = {
                'completed_modules': [],
                'completed_exercises': [],
                'current_streak': 0,
                'total_study_time': 0,
                'achievements': [],
                'last_activity': datetime.now()
            }
            st.success("Progresso limpo com sucesso!")

        if st.button("üì• Exportar Dados", type="secondary", key="config_exportar_dados"):
            st.download_button(
                label="Baixar Dados JSON",
                data=str(st.session_state.user_progress),
                file_name="progresso_algoritmos.json",
                mime="application/json"
            )

# ============================================================================
# üîç VISUALIZADORES INDIVIDUAIS (IMPLEMENTA√á√ïES B√ÅSICAS)
# ============================================================================

def render_busca_binaria():
    """Renderiza demonstra√ß√£o da busca bin√°ria."""
    st.markdown("### üîç Busca Bin√°ria Interativa")

    # Controles
    tamanho = st.slider("Tamanho do array:", 5, 20, 10)
    array = sorted(np.random.randint(1, 100, tamanho))
    target = st.selectbox("Valor a procurar:", array)

    st.write(f"Array: {array}")
    st.write(f"Procurando: {target}")

    # Simula√ß√£o
    if st.button("Executar Busca", key="busca_binaria_executar"):
        esquerda, direita = 0, len(array) - 1
        passos = []

        while esquerda <= direita:
            meio = (esquerda + direita) // 2
            passos.append((esquerda, direita, meio, array[meio]))

            if array[meio] == target:
                st.success(f"‚úÖ Encontrado na posi√ß√£o {meio}!")
                break
            elif array[meio] < target:
                esquerda = meio + 1
            else:
                direita = meio - 1
        else:
            st.error("‚ùå Valor n√£o encontrado!")

        # Mostrar passos
        for i, (esq, dir, meio, valor) in enumerate(passos):
            st.write(f"Passo {i+1}: esquerda={esq}, direita={dir}, meio={meio}, valor={valor}")

def render_dois_ponteiros():
    """Renderiza demonstra√ß√£o dos dois ponteiros."""
    st.markdown("### üë• Dois Ponteiros")

    # Exemplo: Container With Most Water
    st.markdown("**Exemplo: Container With Most Water**")

    alturas = st.text_input("Alturas (separadas por v√≠rgula):", "1,8,6,2,5,4,8,3,7")
    alturas = [int(x.strip()) for x in alturas.split(",")]

    if st.button("Calcular", key="dois_ponteiros_calcular"):
        # Algoritmo dos dois ponteiros
        esquerda, direita = 0, len(alturas) - 1
        max_area = 0

        while esquerda < direita:
            # √Årea = min(altura) * dist√¢ncia
            altura = min(alturas[esquerda], alturas[direita])
            largura = direita - esquerda
            area = altura * largura
            max_area = max(max_area, area)

            # Mover ponteiro da menor altura
            if alturas[esquerda] < alturas[direita]:
                esquerda += 1
            else:
                direita -= 1

        st.success(f"√Årea m√°xima: {max_area}")

        # Visualiza√ß√£o simples
        fig, ax = plt.subplots(figsize=(10, 6))
        ax.bar(range(len(alturas)), alturas, color='skyblue')
        ax.set_title("Container With Most Water")
        ax.set_xlabel("Posi√ß√£o")
        ax.set_ylabel("Altura")
        st.pyplot(fig)

def render_janela_deslizante():
    """Renderiza demonstra√ß√£o da janela deslizante."""
    st.markdown("### ü™ü Janela Deslizante")

    # Exemplo: Maximum Sum Subarray of Size K
    st.markdown("**Exemplo: Soma M√°xima de Subarray de Tamanho K**")

    nums = st.text_input("Array (separado por v√≠rgula):", "2,1,5,1,3,2")
    k = st.number_input("Tamanho da janela (K):", 1, 10, 3)

    nums = [int(x.strip()) for x in nums.split(",")]

    if st.button("Calcular", key="janela_deslizante_calcular"):
        if len(nums) >= k:
            # Janela deslizante
            max_sum = sum(nums[:k])
            current_sum = max_sum

            for i in range(k, len(nums)):
                current_sum = current_sum - nums[i-k] + nums[i]
                max_sum = max(max_sum, current_sum)

            st.success(f"Soma m√°xima: {max_sum}")

            # Visualiza√ß√£o
            fig, ax = plt.subplots(figsize=(10, 6))
            ax.plot(nums, 'o-', linewidth=2, markersize=8)
            ax.set_title(f"Janela Deslizante (K={k})")
            ax.set_xlabel("Posi√ß√£o")
            ax.set_ylabel("Valor")
            ax.grid(True, alpha=0.3)
            st.pyplot(fig)
        else:
            st.error("Array deve ter pelo menos K elementos!")

def render_backtracking():
    """Renderiza demonstra√ß√£o de backtracking."""
    st.markdown("### üîÑ Backtracking")

    # Exemplo: Subsets
    st.markdown("**Exemplo: Gerar Todos os Subconjuntos**")

    nums = st.text_input("N√∫meros (separados por v√≠rgula):", "1,2,3")
    nums = [int(x.strip()) for x in nums.split(",")]

    if st.button("Gerar Subconjuntos"):
        def backtrack(start, current, result):
            result.append(current[:])
            for i in range(start, len(nums)):
                current.append(nums[i])
                backtrack(i + 1, current, result)
                current.pop()

        result = []
        backtrack(0, [], result)

        st.write("**Subconjuntos gerados:**")
        for subset in result:
            st.write(f"[{', '.join(map(str, subset))}]")

        st.info(f"Total de subconjuntos: {len(result)}")

def render_heap():
    """Renderiza demonstra√ß√£o de Heap."""
    st.markdown("### üî∫ Heap (Min/Max)")

    # Simula√ß√£o simples de heap
    import heapq

    st.markdown("**Exemplo: Heap M√≠nimo**")

    valores = st.text_input("Valores (separados por v√≠rgula):", "3,1,4,1,5,9,2,6")
    valores = [int(x.strip()) for x in valores.split(",")]

    if st.button("Criar Heap", key="heap_criar"):
        heap = valores[:]
        heapq.heapify(heap)

        st.write("**Array original:**", valores)
        st.write("**Heap resultante:**", heap)

        # Opera√ß√µes
        if heap:
            menor = heapq.heappop(heap)
            st.write(f"**Menor elemento removido:** {menor}")
            st.write("**Heap ap√≥s remo√ß√£o:**", heap)

def render_trie():
    """Renderiza demonstra√ß√£o de Trie."""
    st.markdown("### üå≥ Trie (√Årvore de Prefixos)")

    # Implementa√ß√£o simples de Trie
    class TrieNode:
        def __init__(self):
            self.children = {}
            self.is_end = False

    class Trie:
        def __init__(self):
            self.root = TrieNode()

        def insert(self, word):
            node = self.root
            for char in word:
                if char not in node.children:
                    node.children[char] = TrieNode()
                node = node.children[char]
            node.is_end = True

        def search(self, word):
            node = self.root
            for char in word:
                if char not in node.children:
                    return False
                node = node.children[char]
            return node.is_end

    # Demonstra√ß√£o
    palavras = st.text_area("Palavras (uma por linha):", "casa\ncarro\ncasa\ncachorro")
    palavra_busca = st.text_input("Palavra para buscar:")

    if st.button("Processar", key="trie_processar"):
        trie = Trie()
        palavras_lista = [p.strip() for p in palavras.split("\n") if p.strip()]

        for palavra in palavras_lista:
            trie.insert(palavra)

        st.write("**Palavras inseridas:**", palavras_lista)

        if palavra_busca:
            encontrado = trie.search(palavra_busca)
            if encontrado:
                st.success(f"‚úÖ '{palavra_busca}' encontrada!")
            else:
                st.error(f"‚ùå '{palavra_busca}' n√£o encontrada!")

def render_union_find():
    """Renderiza demonstra√ß√£o de Union-Find."""
    st.markdown("### ü§ù Union-Find")

    # Implementa√ß√£o simples
    class UnionFind:
        def __init__(self, size):
            self.parent = list(range(size))
            self.rank = [0] * size

        def find(self, p):
            if self.parent[p] != p:
                self.parent[p] = self.find(self.parent[p])
            return self.parent[p]

        def union(self, p, q):
            rootP = self.find(p)
            rootQ = self.find(q)

            if rootP == rootQ:
                return False

            if self.rank[rootP] < self.rank[rootQ]:
                self.parent[rootP] = rootQ
            elif self.rank[rootP] > self.rank[rootQ]:
                self.parent[rootQ] = rootP
            else:
                self.parent[rootQ] = rootP
                self.rank[rootP] += 1

            return True

    # Demonstra√ß√£o
    n = st.number_input("N√∫mero de elementos:", 5, 20, 10)

    uf = UnionFind(n)

    st.write("**Estado inicial:**")
    st.write("Parent:", uf.parent)
    st.write("Rank:", uf.rank)

    col1, col2 = st.columns(2)
    with col1:
        p = st.number_input("Elemento P:", 0, n-1, 0)
    with col2:
        q = st.number_input("Elemento Q:", 0, n-1, 1)

    if st.button("Fazer Union", key="union_find_union"):
        if uf.union(p, q):
            st.success(f"‚úÖ Union realizada entre {p} e {q}")
        else:
            st.info(f"‚ÑπÔ∏è {p} e {q} j√° est√£o no mesmo conjunto")

        st.write("**Estado ap√≥s union:**")
        st.write("Parent:", uf.parent)
        st.write("Rank:", uf.rank)

def render_segment_tree():
    """Renderiza demonstra√ß√£o de Segment Tree."""
    st.markdown("### üìä Segment Tree")

    # Implementa√ß√£o b√°sica
    class SegmentTree:
        def __init__(self, arr):
            self.n = len(arr)
            self.tree = [0] * (4 * self.n)
            self.build(arr, 0, 0, self.n - 1)

        def build(self, arr, node, start, end):
            if start == end:
                self.tree[node] = arr[start]
                return

            mid = (start + end) // 2
            self.build(arr, 2*node+1, start, mid)
            self.build(arr, 2*node+2, mid+1, end)
            self.tree[node] = self.tree[2*node+1] + self.tree[2*node+2]

        def query(self, node, start, end, l, r):
            if r < start or end < l:
                return 0
            if l <= start and end <= r:
                return self.tree[node]

            mid = (start + end) // 2
            left = self.query(2*node+1, start, mid, l, r)
            right = self.query(2*node+2, mid+1, end, l, r)
            return left + right

    # Demonstra√ß√£o
    valores = st.text_input("Array (separado por v√≠rgula):", "1,3,5,7,9,11")
    valores = [int(x.strip()) for x in valores.split(",")]

    if valores:
        tree = SegmentTree(valores)

        st.write("**Array:**", valores)
        st.write("**Segment Tree:**", tree.tree)

        col1, col2 = st.columns(2)
        with col1:
            l = st.number_input("√çndice esquerdo:", 0, len(valores)-1, 0)
        with col2:
            r = st.number_input("√çndice direito:", 0, len(valores)-1, len(valores)-1)

        if st.button("Consultar Soma", key="segment_tree_consultar"):
            if l <= r:
                soma = tree.query(0, 0, len(valores)-1, l, r)
                st.success(f"Soma de [{l}:{r}] = {soma}")
            else:
                st.error("√çndice esquerdo deve ser <= direito!")

def render_forca_bruta():
    """Renderiza exemplo de for√ßa bruta."""
    st.markdown("### üí™ For√ßa Bruta")
    st.markdown("**Exemplo: Subset Sum Problem**")

    nums = st.text_input("N√∫meros:", "1,2,3,4,5")
    target = st.number_input("Soma alvo:", 1, 50, 9)

    nums = [int(x.strip()) for x in nums.split(",")]

    if st.button("Encontrar Subconjuntos", key="forca_bruta_subsets"):
        def find_subsets(nums, target, index=0, current=[], result=[]):
            if sum(current) == target:
                result.append(current[:])
                return
            if sum(current) > target or index >= len(nums):
                return

            # Incluir elemento atual
            current.append(nums[index])
            find_subsets(nums, target, index + 1, current, result)
            current.pop()

            # N√£o incluir elemento atual
            find_subsets(nums, target, index + 1, current, result)

        result = []
        find_subsets(nums, target, 0, [], result)

        if result:
            st.success(f"Encontrados {len(result)} subconjuntos:")
            for subset in result:
                st.write(f"[{', '.join(map(str, subset))}] = {sum(subset)}")
        else:
            st.warning("Nenhum subconjunto encontrado com essa soma.")

def render_memoizacao():
    """Renderiza exemplo de memoiza√ß√£o."""
    st.markdown("### üß† Memoiza√ß√£o")
    st.markdown("**Exemplo: Fibonacci com Memoiza√ß√£o**")

    n = st.number_input("Calcular Fibonacci de:", 0, 50, 10)

    if st.button("Calcular", key="memoizacao_calcular"):
        memo = {}

        def fib_memo(n):
            if n in memo:
                return memo[n]
            if n <= 1:
                return n

            memo[n] = fib_memo(n-1) + fib_memo(n-2)
            return memo[n]

        resultado = fib_memo(n)
        st.success(f"Fibonacci({n}) = {resultado}")

        # Mostrar cache
        st.write("**Cache de memoiza√ß√£o:**")
        for k, v in sorted(memo.items()):
            st.write(f"fib({k}) = {v}")

def render_tabulacao():
    """Renderiza exemplo de tabula√ß√£o."""
    st.markdown("### üìä Tabula√ß√£o")
    st.markdown("**Exemplo: Fibonacci com Tabula√ß√£o**")

    n = st.number_input("Calcular Fibonacci at√©:", 0, 50, 10)

    if st.button("Calcular", key="tabulacao_calcular"):
        if n >= 0:
            fib = [0] * (n + 1)
            if n >= 1:
                fib[1] = 1

            for i in range(2, n + 1):
                fib[i] = fib[i-1] + fib[i-2]

            st.success(f"Fibonacci({n}) = {fib[n]}")

            # Mostrar tabela
            st.write("**Tabela de Fibonacci:**")
            for i in range(min(n+1, 20)):  # Mostra at√© 20 primeiros
                st.write(f"fib({i}) = {fib[i]}")

            if n > 19:
                st.info("... (mostrando apenas os primeiros 20)")

def render_problemas_classicos():
    """Renderiza problemas cl√°ssicos de DP."""
    st.markdown("### üéØ Problemas Cl√°ssicos de Programa√ß√£o Din√¢mica")

    problema = st.selectbox("Escolha um problema:",
                           ["Knapsack 0/1", "Longest Common Subsequence", "Coin Change"])

    if problema == "Knapsack 0/1":
        st.markdown("**Knapsack 0/1**")
        st.markdown("Dado um conjunto de itens com pesos e valores, maximize o valor sem exceder a capacidade.")

        pesos = st.text_input("Pesos:", "2,3,4,5")
        valores = st.text_input("Valores:", "3,4,5,6")
        capacidade = st.number_input("Capacidade:", 1, 50, 8)

        pesos = [int(x.strip()) for x in pesos.split(",")]
        valores = [int(x.strip()) for x in valores.split(",")]

        if st.button("Resolver", key="knapsack_resolver"):
            n = len(pesos)
            dp = [[0 for _ in range(capacidade + 1)] for _ in range(n + 1)]

            for i in range(1, n + 1):
                for w in range(capacidade + 1):
                    if pesos[i-1] <= w:
                        dp[i][w] = max(dp[i-1][w], dp[i-1][w - pesos[i-1]] + valores[i-1])
                    else:
                        dp[i][w] = dp[i-1][w]

            st.success(f"Valor m√°ximo: {dp[n][capacidade]}")

    elif problema == "Longest Common Subsequence":
        st.markdown("**Longest Common Subsequence (LCS)**")
        st.markdown("Encontre a maior subsequ√™ncia comum entre duas strings.")

        s1 = st.text_input("String 1:", "AGGTAB")
        s2 = st.text_input("String 2:", "GXTXAYB")

        if st.button("Calcular LCS", key="lcs_calcular"):
            m, n = len(s1), len(s2)
            dp = [[0] * (n + 1) for _ in range(m + 1)]

            for i in range(1, m + 1):
                for j in range(1, n + 1):
                    if s1[i-1] == s2[j-1]:
                        dp[i][j] = dp[i-1][j-1] + 1
                    else:
                        dp[i][j] = max(dp[i-1][j], dp[i][j-1])

            st.success(f"Comprimento da LCS: {dp[m][n]}")

    elif problema == "Coin Change":
        st.markdown("**Coin Change**")
        st.markdown("Encontre o n√∫mero m√≠nimo de moedas para fazer um valor.")

        moedas = st.text_input("Moedas (separadas por v√≠rgula):", "1,2,5")
        valor = st.number_input("Valor:", 1, 100, 11)

        moedas = [int(x.strip()) for x in moedas.split(",")]

        if st.button("Calcular", key="coin_change_calcular"):
            dp = [float('inf')] * (valor + 1)
            dp[0] = 0

            for i in range(1, valor + 1):
                for moeda in moedas:
                    if moeda <= i:
                        dp[i] = min(dp[i], dp[i - moeda] + 1)

            if dp[valor] != float('inf'):
                st.success(f"N√∫mero m√≠nimo de moedas: {dp[valor]}")
            else:
                st.error("N√£o √© poss√≠vel fazer esse valor com as moedas dadas.")

def render_simulacao_entrevista():
    """Renderiza simula√ß√£o de entrevista."""
    st.markdown("### üéØ Simula√ß√£o de Entrevista")

    # Sele√ß√£o de dificuldade e categoria
    col1, col2 = st.columns(2)

    with col1:
        dificuldade = st.selectbox("Dificuldade:", ["Easy", "Medium", "Hard"], index=1)

    with col2:
        categoria = st.selectbox("Categoria:", ["Array", "String", "Tree", "Graph", "DP"], index=0)

    tempo = st.slider("Tempo limite (minutos):", 15, 60, 30)

    if st.button("üéØ Iniciar Simula√ß√£o", type="primary", key="entrevista_iniciar"):
        st.success("Simula√ß√£o iniciada! Responda o problema abaixo:")

        # Problema de exemplo baseado na categoria
        if categoria == "Array":
            st.markdown("""
            **Problema: Two Sum**

            Dado um array de n√∫meros inteiros `nums` e um inteiro `target`, retorne os √≠ndices dos dois n√∫meros que somam `target`.

            Voc√™ pode assumir que cada entrada tem exatamente uma solu√ß√£o, e n√£o pode usar o mesmo elemento duas vezes.

            **Exemplo:**
            ```
            Input: nums = [2,7,11,15], target = 9
            Output: [0,1]
            ```
            """)

            # √Årea de resposta
            resposta = st.text_area("Sua solu√ß√£o (c√≥digo Python):", height=200)

            if st.button("üì§ Enviar Resolu√ß√£o", key="entrevista_enviar"):
                if resposta.strip():
                    st.success("‚úÖ Resolu√ß√£o enviada! An√°lise em andamento...")

                    # An√°lise simples
                    if "for" in resposta and "enumerate" in resposta:
                        st.info("üéØ Boa abordagem! Voc√™ usou itera√ß√£o com enumerate.")
                    if "return" in resposta:
                        st.info("‚úÖ Estrutura de fun√ß√£o correta!")

                    st.markdown("### üìä An√°lise da Solu√ß√£o")
                    st.markdown("- **Complexidade Temporal:** O(n)")
                    st.markdown("- **Complexidade Espacial:** O(n)")
                    st.markdown("- **Pontua√ß√£o:** 8/10 - Boa solu√ß√£o!")

                else:
                    st.warning("Por favor, escreva sua solu√ß√£o!")

def render_analise_codigo():
    """Renderiza an√°lise de c√≥digo."""
    st.markdown("### üìä An√°lise de C√≥digo")

    codigo = st.text_area("Cole seu c√≥digo para an√°lise:", height=200,
                         value="""def two_sum(nums, target):
    seen = {}
    for i, num in enumerate(nums):
        complement = target - num
        if complement in seen:
            return [seen[complement], i]
        seen[num] = i
    return []""")

    if st.button("üîç Analisar C√≥digo", key="analise_codigo_analisar"):
        st.markdown("### üìã An√°lise Detalhada")

        # An√°lise b√°sica
        linhas = len(codigo.split('\n'))
        funcoes = codigo.count('def ')
        loops = codigo.count('for ') + codigo.count('while ')

        col1, col2, col3 = st.columns(3)

        with col1:
            st.metric("Linhas de C√≥digo", linhas)

        with col2:
            st.metric("Fun√ß√µes", funcoes)

        with col3:
            st.metric("La√ßos", loops)

        # Feedback
        st.markdown("### üí° Feedback")

        if "dict" in codigo or "seen" in codigo:
            st.success("‚úÖ Uso eficiente de dicion√°rio para lookup O(1)!")

        if "enumerate" in codigo:
            st.success("‚úÖ Uso correto de enumerate para √≠ndices!")

        if "return" in codigo:
            st.success("‚úÖ Estrutura de retorno adequada!")

        # Sugest√µes
        st.markdown("### üéØ Sugest√µes de Melhoria")
        st.markdown("- Considere adicionar valida√ß√£o de entrada")
        st.markdown("- Adicione coment√°rios explicativos")
        st.markdown("- Considere casos extremos (array vazio, etc.)")

def render_feedback_entrevista():
    """Renderiza feedback da entrevista."""
    st.markdown("### üìù Feedback da Entrevista")

    # M√©tricas de performance
    col1, col2, col3, col4 = st.columns(4)

    with col1:
        st.metric("Pontua√ß√£o Geral", "8.5/10")

    with col2:
        st.metric("Complexidade", "9/10")

    with col3:
        st.metric("Legibilidade", "8/10")

    with col4:
        st.metric("Efici√™ncia", "9/10")

    # Feedback detalhado
    st.markdown("### üí¨ Feedback Detalhado")

    st.markdown("""
    **Pontos Fortes:**
    - ‚úÖ Solu√ß√£o correta e eficiente
    - ‚úÖ Boa compreens√£o do problema
    - ‚úÖ C√≥digo limpo e bem estruturado
    - ‚úÖ Uso adequado de estruturas de dados

    **√Åreas para Melhorar:**
    - ‚ö†Ô∏è Poderia adicionar mais coment√°rios
    - ‚ö†Ô∏è Considere casos extremos
    - ‚ö†Ô∏è Valida√ß√£o de entrada poderia ser mais robusta

    **Sugest√µes para Pr√≥ximas Entrevistas:**
    - Pratique mais problemas de Two Pointers
    - Estude otimiza√ß√µes para casos espec√≠ficos
    - Foque em explicar seu racioc√≠nio durante a resolu√ß√£o
    """)

    # Recomenda√ß√µes
    st.markdown("### üìö Recomenda√ß√µes de Estudo")
    st.markdown("""
    - üîç **Busca Bin√°ria:** Pratique varia√ß√µes (lower bound, upper bound)
    - üë• **Dois Ponteiros:** Estude aplica√ß√µes em strings e arrays
    - ü™ü **Janela Deslizante:** Foque em problemas de substring
    - üîÑ **Backtracking:** Pratique com problemas de combina√ß√£o
    """)

# ============================================================================
# üéØ FUN√á√ÉO PRINCIPAL
# ============================================================================

def main():
    """Fun√ß√£o principal da aplica√ß√£o."""
    # Carregar CSS
    load_css()

    # Inicializar estado da sess√£o
    initialize_session_state()

    # Renderizar sidebar
    render_sidebar()

    # Roteamento principal baseado na sele√ß√£o
    selected_module = st.session_state.current_module

    if selected_module == "üè† Home":
        render_home_page()
    elif selected_module == "üìö M√≥dulo 1: Fundamentos":
        render_module_1()
    elif selected_module == "üèóÔ∏è M√≥dulo 2: Estruturas de Dados":
        render_module_2()
    elif selected_module == "üéØ M√≥dulo 3: Programa√ß√£o Din√¢mica":
        render_module_3()
    elif selected_module == "üíº M√≥dulo 4: Entrevistas":
        render_module_4()
    elif selected_module == "üéØ Aprendizado Contextualizado":
        render_aprendizado_contextualizado()
    elif selected_module == "üéØ Exerc√≠cios Pr√°ticos":
        render_exercicios_praticos()
    elif selected_module == "üîç Busca MCP (Tavily)":
        render_busca_mcp()
    elif selected_module == "üìä Dashboard de Progresso":
        render_dashboard_progresso()
    elif selected_module == "üèÜ Conquistas":
        render_conquistas()
    elif selected_module == "‚öôÔ∏è Configura√ß√µes":
        render_configuracoes()

    # Footer
    st.markdown("---")
    st.markdown("""
    <div style="text-align: center; color: #666; font-size: 0.9rem;">
        üéØ <strong>Algoritmos Visualizador Integrado</strong> | 
        Desenvolvido com ‚ù§Ô∏è usando Streamlit | 
        Vers√£o 2.0
    </div>
    """, unsafe_allow_html=True)

if __name__ == "__main__":
    main()
