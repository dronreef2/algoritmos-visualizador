# üîó Configura√ß√£o VS Code + MCP

"""
Configura√ß√£o para integrar o MCP Server com VS Code.
Permite dynamic tool discovery e comunica√ß√£o com Streamlit.
"""

import json
from pathlib import Path

# Configura√ß√£o MCP para VS Code
vscode_mcp_config = {
    "mcpServers": {
        "algorithm-analyzer": {
            "command": "python",
            "args": ["mcp_server.py"],
            "cwd": str(Path.cwd()),
            "env": {
                "PYTHONPATH": str(Path.cwd())
            }
        }
    }
}

# Configura√ß√£o de settings.json para VS Code
vscode_settings = {
    "mcp.servers": [
        {
            "name": "algorithm-analyzer",
            "description": "Servidor MCP para an√°lise de algoritmos",
            "url": "http://localhost:8000",
            "tools": [
                "analyze_algorithm",
                "benchmark_performance", 
                "suggest_optimizations",
                "generate_code",
                "complexity_calculator",
                "visualize_execution"
            ]
        }
    ],
    "github.copilot.enable": {
        "*": True,
        "yaml": True,
        "plaintext": True,
        "markdown": True,
        "python": True
    },
    "github.copilot.advanced": {
        "debug.overrideEngine": "codex",
        "length": 3000,
        "temperature": 0.1
    }
}

# Instru√ß√µes customizadas para GitHub Copilot
copilot_instructions = """
# üß† Instru√ß√µes Customizadas - Projeto Algoritmos + MCP

## Contexto do Projeto
Este √© um projeto de estudo de algoritmos com integra√ß√£o MCP (Model Context Protocol) e Streamlit.

### Ferramentas MCP Dispon√≠veis:
- `analyze_algorithm`: An√°lise de complexidade automatizada
- `benchmark_performance`: Testes de performance em tempo real
- `suggest_optimizations`: Sugest√µes de otimiza√ß√£o
- `generate_code`: Gera√ß√£o autom√°tica de c√≥digo
- `complexity_calculator`: C√°lculo de Big O
- `visualize_execution`: Dados para visualiza√ß√£o

### Padr√µes de C√≥digo:
1. **An√°lise de Algoritmos**: Sempre incluir complexidade temporal e espacial
2. **Visualiza√ß√µes**: Usar matplotlib/plotly para demonstra√ß√µes
3. **MCP Integration**: Aproveitar ferramentas din√¢micas quando dispon√≠veis
4. **Documenta√ß√£o**: Explicar o "porqu√™", n√£o apenas o "como"

### Prompts Sugeridos:
- "/analyze-complexity": Analisar complexidade do c√≥digo selecionado
- "/optimize-algorithm": Sugerir otimiza√ß√µes usando MCP
- "/generate-visualization": Criar visualiza√ß√£o do algoritmo
- "/benchmark-performance": Executar testes de performance

### Estrutura do Projeto:
- `modulo_1_fundamentos/`: Algoritmos fundamentais implementados
- `streamlit_app_mcp.py`: App principal com integra√ß√£o MCP
- `mcp_server.py`: Servidor MCP customizado
- `visualizador_algoritmos.ipynb`: Notebook interativo

### Metodologia dos 3 Passos:
1. **For√ßa Bruta**: Implementa√ß√£o direta
2. **Memoiza√ß√£o**: Otimiza√ß√£o com cache
3. **Tabula√ß√£o**: Abordagem bottom-up

Use essas informa√ß√µes como contexto para sugest√µes mais precisas e relevantes.
"""

def gerar_arquivos_configuracao():
    """Gera arquivos de configura√ß√£o para VS Code + MCP."""
    
    # Criar diret√≥rio .vscode se n√£o existir
    vscode_dir = Path('.vscode')
    vscode_dir.mkdir(exist_ok=True)
    
    # settings.json
    with open(vscode_dir / 'settings.json', 'w', encoding='utf-8') as f:
        json.dump(vscode_settings, f, indent=2, ensure_ascii=False)
    
    # mcp.json (configura√ß√£o espec√≠fica MCP)
    with open(vscode_dir / 'mcp.json', 'w', encoding='utf-8') as f:
        json.dump(vscode_mcp_config, f, indent=2, ensure_ascii=False)
    
    # Instru√ß√µes para Copilot
    with open('.copilot-instructions.md', 'w', encoding='utf-8') as f:
        f.write(copilot_instructions)
    
    print("‚úÖ Arquivos de configura√ß√£o gerados:")
    print("  - .vscode/settings.json")
    print("  - .vscode/mcp.json") 
    print("  - .copilot-instructions.md")

# Exemplo de integra√ß√£o com GitHub Copilot Chat
def exemplo_prompt_copilot():
    """Exemplo de como usar prompts customizados com MCP."""
    
    prompts_exemplo = {
        "/analyze-complexity": {
            "description": "Analisa complexidade do c√≥digo selecionado usando MCP",
            "example": """
            # Selecione o c√≥digo e use:
            /analyze-complexity
            
            # O Copilot ir√°:
            # 1. Chamar o MCP server para an√°lise
            # 2. Retornar complexidade temporal/espacial
            # 3. Sugerir otimiza√ß√µes se aplic√°vel
            """
        },
        
        "/optimize-algorithm": {
            "description": "Sugere otimiza√ß√µes usando ferramentas MCP",
            "example": """
            # Com c√≥digo selecionado:
            /optimize-algorithm --context="large_dataset" --priority="speed"
            
            # Resposta incluir√°:
            # - An√°lise do algoritmo atual
            # - Sugest√µes de otimiza√ß√£o
            # - Algoritmos alternativos
            # - Estimativa de melhoria
            """
        },
        
        "/generate-visualization": {
            "description": "Cria c√≥digo para visualizar algoritmo",
            "example": """
            /generate-visualization --algorithm="binary_search" --style="animated"
            
            # Gera c√≥digo para:
            # - Visualiza√ß√£o passo a passo
            # - Gr√°ficos interativos
            # - Integra√ß√£o com Streamlit
            """
        },
        
        "/benchmark-performance": {
            "description": "Executa benchmark usando MCP",
            "example": """
            /benchmark-performance --sizes="[100,1000,10000]" --iterations=10
            
            # Retorna:
            # - Tempos de execu√ß√£o
            # - Uso de mem√≥ria
            # - Gr√°ficos de performance
            # - Score de otimiza√ß√£o
            """
        }
    }
    
    return prompts_exemplo

# Workflow de desenvolvimento com MCP
def workflow_desenvolvimento():
    """Descreve o workflow ideal de desenvolvimento."""
    
    workflow = """
    # üîÑ Workflow de Desenvolvimento com MCP + VS Code

    ## 1. Fase de An√°lise
    ```
    1. Escrever algoritmo inicial
    2. Usar /analyze-complexity para an√°lise autom√°tica
    3. Revisar sugest√µes do MCP server
    4. Documentar complexidade encontrada
    ```

    ## 2. Fase de Otimiza√ß√£o  
    ```
    1. Usar /optimize-algorithm para sugest√µes
    2. Implementar otimiza√ß√µes sugeridas
    3. Executar /benchmark-performance para validar
    4. Comparar resultados antes/depois
    ```

    ## 3. Fase de Visualiza√ß√£o
    ```
    1. Usar /generate-visualization para criar demos
    2. Integrar com Streamlit app
    3. Testar interatividade
    4. Deploy autom√°tico no Streamlit Cloud
    ```

    ## 4. Fase de Documenta√ß√£o
    ```
    1. GitHub Copilot gera documenta√ß√£o baseada no c√≥digo
    2. MCP fornece an√°lises t√©cnicas detalhadas
    3. Streamlit exibe documenta√ß√£o interativa
    4. Notebook Jupyter consolida tudo
    ```

    ## 5. Ciclo Cont√≠nuo
    ```
    C√≥digo ‚Üí MCP Analysis ‚Üí Otimiza√ß√£o ‚Üí Visualiza√ß√£o ‚Üí Deploy ‚Üí Feedback ‚Üí Repeat
    ```
    """
    
    return workflow

if __name__ == "__main__":
    print("üîß Configurando integra√ß√£o VS Code + MCP...")
    
    # Gerar arquivos de configura√ß√£o
    gerar_arquivos_configuracao()
    
    # Mostrar exemplos de prompts
    print("\nü§ñ Prompts Copilot dispon√≠veis:")
    prompts = exemplo_prompt_copilot()
    for prompt, info in prompts.items():
        print(f"\n{prompt}")
        print(f"  üìù {info['description']}")
    
    # Mostrar workflow
    print("\n" + workflow_desenvolvimento())
    
    print("""
    üéØ Pr√≥ximos Passos:
    
    1. ‚úÖ Configura√ß√£o gerada
    2. üîÑ Reiniciar VS Code para aplicar configura√ß√µes
    3. üöÄ Executar MCP server: python mcp_server.py
    4. üé® Testar integra√ß√£o com prompts customizados
    5. üåê Deploy Streamlit app com MCP integration
    
    üéâ Sua configura√ß√£o MCP + VS Code est√° pronta!
    """)
