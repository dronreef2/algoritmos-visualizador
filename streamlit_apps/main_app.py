"""
üéÆ STREAMLIT APPS - COMPONENTES MODULARES
=========================================

Este diret√≥rio cont√©m aplica√ß√µes Streamlit modulares para visualiza√ß√£o
de algoritmos e estruturas de dados.

Estrutura:
- components/: Componentes reutiliz√°veis
- pages/: P√°ginas individuais por m√≥dulo
- utils/: Utilit√°rios compartilhados
- config/: Configura√ß√µes globais

Padr√£o de Arquitetura:
- Player: Controles de intera√ß√£o (sliders, bot√µes)
- Renderer: Visualiza√ß√µes (gr√°ficos, anima√ß√µes)
- Controller: L√≥gica de neg√≥cio
- Model: Dados e estado
"""

import streamlit as st
from pathlib import Path
import sys
import numpy as np
import matplotlib.pyplot as plt
from datetime import datetime, timedelta
from typing import List, Dict, Optional, Tuple
import time

# Adicionar diret√≥rios dos m√≥dulos ao path
project_root = Path(__file__).parent.parent
sys.path.append(str(project_root))
sys.path.append(str(project_root / "modulo_1_fundamentos"))
sys.path.append(str(project_root / "modulo_2_estruturas_dados"))
sys.path.append(str(project_root / "modulo_3_programacao_dinamica"))
sys.path.append(str(project_root / "modulo_4_entrevistas"))

# Importar sistema de aprendizado contextualizado
try:
    from aprendizado_contextual_ui import render_aprendizado_contextual
    APRENDIZADO_CONTEXTUAL_DISPONIVEL = True
except ImportError:
    APRENDIZADO_CONTEXTUAL_DISPONIVEL = False

# Importar sistema de exerc√≠cios pr√°ticos
try:
    from exercicios_praticos_ui import render_exercicios_praticos
    EXERCICIOS_PRATICOS_DISPONIVEL = True
except ImportError:
    EXERCICIOS_PRATICOS_DISPONIVEL = False

# ============================================================================
# üìã CONFIGURA√á√ÉO PRINCIPAL
# ============================================================================

def setup_page_config():
    """Configura a p√°gina principal do Streamlit."""
    st.set_page_config(
        page_title="üéØ Algoritmos Visualizador",
        page_icon="üéØ",
        layout="wide",
        initial_sidebar_state="expanded"
    )
    
    # CSS customizado
    st.markdown("""
    <style>
    .main-header {
        font-size: 2.5rem;
        color: #2E86AB;
        text-align: center;
        padding: 1rem 0;
        border-bottom: 3px solid #2E86AB;
        margin-bottom: 2rem;
    }
    
    .module-card {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 1.5rem;
        border-radius: 10px;
        margin: 1rem 0;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }
    
    .metric-card {
        background: #f8f9fa;
        padding: 1rem;
        border-radius: 8px;
        border-left: 4px solid #2E86AB;
        margin: 0.5rem 0;
    }
    
    .algorithm-step {
        background: #e3f2fd;
        padding: 1rem;
        border-radius: 8px;
        margin: 0.5rem 0;
        border-left: 4px solid #1976d2;
    }
    
    .complexity-badge {
        background: #4caf50;
        color: white;
        padding: 0.25rem 0.5rem;
        border-radius: 4px;
        font-size: 0.875rem;
        font-weight: bold;
    }
    
    .warning-badge {
        background: #ff9800;
        color: white;
        padding: 0.25rem 0.5rem;
        border-radius: 4px;
        font-size: 0.875rem;
        font-weight: bold;
    }
    
    .error-badge {
        background: #f44336;
        color: white;
        padding: 0.25rem 0.5rem;
        border-radius: 4px;
        font-size: 0.875rem;
        font-weight: bold;
    }
    </style>
    """, unsafe_allow_html=True)

def render_mcp_search():
    """Renderiza a interface de busca MCP com Tavily."""
    st.markdown("## üîç Busca Inteligente com MCP (Tavily)")
    
    st.markdown("""
    ### ü§ñ Busca Contextual com IA
    
    Use o poder da busca inteligente para encontrar informa√ß√µes relevantes sobre algoritmos,
    estruturas de dados e problemas de programa√ß√£o.
    """)
    
    # Verificar se o MCP est√° configurado
    try:
        from mcp_tavily_integration import TavilySearchClient
        
        # Inicializar cliente MCP
        if 'mcp_client' not in st.session_state:
            st.session_state.mcp_client = TavilySearchClient()
        
        client = st.session_state.mcp_client
        
        # Status da configura√ß√£o
        if client.is_configured():
            st.success("‚úÖ MCP Server Tavily configurado e pronto!")
        else:
            st.warning("‚ö†Ô∏è MCP Server precisa ser configurado. Verifique o arquivo .env")
            st.info("Para configurar: Edite `mcp-server-tavily/.env` e adicione sua chave da API Tavily")
            return
        
        # Interface de busca
        col1, col2 = st.columns([3, 1])
        
        with col1:
            query = st.text_input(
                "Digite sua consulta:",
                placeholder="Ex: 'como funciona o algoritmo de Dijkstra?'",
                help="Fa√ßa perguntas sobre algoritmos, estruturas de dados ou problemas de programa√ß√£o"
            )
        
        with col2:
            search_type = st.selectbox(
                "Tipo de busca:",
                ["basic", "advanced"],
                help="Basic: busca r√°pida, Advanced: busca detalhada com mais contexto"
            )
            
            include_answer = st.checkbox(
                "Incluir resposta da IA",
                value=False,
                help="Gera uma resposta contextualizada usando IA baseada nos resultados"
            )
            
            max_results = st.slider(
                "M√°ximo de resultados:",
                min_value=1,
                max_value=10,
                value=5,
                help="N√∫mero m√°ximo de resultados a retornar"
            )
        
        if st.button("üîç Buscar", type="primary", use_container_width=True):
            if query.strip():
                with st.spinner("üîÑ Buscando informa√ß√µes com IA..."):
                    try:
                        # Realizar busca
                        result = client.search(
                            query, 
                            search_depth=search_type,
                            include_answer=include_answer,
                            max_results=max_results
                        )
                        
                        if result and "results" in result:
                            st.success(f"‚úÖ Encontrados {len(result['results'])} resultados!")
                            
                            # Exibir resposta da IA se dispon√≠vel
                            if result.get("answer") and include_answer:
                                st.markdown("### ü§ñ Resposta da IA")
                                st.info(result["answer"])
                                st.markdown("---")
                            
                            # Exibir resultados
                            for i, item in enumerate(result["results"], 1):
                                with st.expander(f"üìÑ Resultado {i}: {item.get('title', 'Sem t√≠tulo')[:50]}..."):
                                    st.markdown(f"**URL:** {item.get('url', 'N/A')}")
                                    st.markdown(f"**Conte√∫do:** {item.get('snippet', 'N/A')}")
                                    
                                    if item.get('content'):
                                        st.markdown("**Conte√∫do completo:**")
                                        st.text_area(
                                            "Conte√∫do",
                                            item['content'],
                                            height=150,
                                            key=f"content_{i}"
                                        )
                        else:
                            st.warning("Nenhum resultado encontrado. Tente reformular sua consulta.")
                            
                    except Exception as e:
                        st.error(f"Erro na busca: {str(e)}")
                        st.info("Verifique se o servidor MCP est√° rodando e configurado corretamente.")
            else:
                st.warning("Por favor, digite uma consulta para buscar.")
        
        # Exemplos de consultas
        with st.expander("üí° Exemplos de Consultas"):
            st.markdown("""
            **Algoritmos:**
            - "como funciona o algoritmo de busca bin√°ria?"
            - "explica√ß√£o do algoritmo de Dijkstra"
            - "diferen√ßa entre BFS e DFS"
            
            **Estruturas de Dados:**
            - "como implementar uma √°rvore bin√°ria de busca?"
            - "vantagens da tabela hash"
            - "quando usar lista ligada vs array?"
            
            **Programa√ß√£o Din√¢mica:**
            - "problema da mochila 0/1 explicado"
            - "longest common subsequence algorithm"
            - "metodologia dos 3 passos em DP"
            """)
            
    except ImportError as e:
        st.error(f"Erro ao importar MCP: {e}")
        st.info("Certifique-se de que o m√≥dulo `mcp_tavily_integration.py` est√° dispon√≠vel.")

def main():
    """Fun√ß√£o principal da aplica√ß√£o."""
    setup_page_config()
    
    # Header principal
    st.markdown("""
    <div class="main-header">
        üéØ Algoritmos Visualizador
    </div>
    """, unsafe_allow_html=True)
    
    # Sidebar para navega√ß√£o
    st.sidebar.title("üß≠ Navega√ß√£o")
    
    # Sele√ß√£o de m√≥dulo
    module = st.sidebar.selectbox(
        "Selecione o M√≥dulo",
        [
            "üè† Home",
            "üéØ Aprendizado Contextualizado",
            "üéØ Exerc√≠cios Pr√°ticos",
            "üìö M√≥dulo 1: Fundamentos",
            "üèóÔ∏è M√≥dulo 2: Estruturas de Dados",
            "üéØ M√≥dulo 3: Programa√ß√£o Din√¢mica",
            "üíº M√≥dulo 4: Entrevistas",
            "üîç Busca MCP (Tavily)"
        ]
    )
    
    # Roteamento baseado na sele√ß√£o
    if module == "üè† Home":
        render_home_page()
    elif module == "üéØ Aprendizado Contextualizado":
        if APRENDIZADO_CONTEXTUAL_DISPONIVEL:
            render_aprendizado_contextual()
        else:
            st.error("Sistema de aprendizado contextualizado n√£o dispon√≠vel.")
    elif module == "üéØ Exerc√≠cios Pr√°ticos":
        if EXERCICIOS_PRATICOS_DISPONIVEL:
            render_exercicios_praticos()
        else:
            st.error("Sistema de exerc√≠cios pr√°ticos n√£o dispon√≠vel.")
    elif module == "üìö M√≥dulo 1: Fundamentos":
        render_module_1()
    elif module == "üèóÔ∏è M√≥dulo 2: Estruturas de Dados":
        render_module_2()
    elif module == "üéØ M√≥dulo 3: Programa√ß√£o Din√¢mica":
        render_module_3()
    elif module == "üíº M√≥dulo 4: Entrevistas":
        render_module_4()
    elif module == "üîç Busca MCP (Tavily)":
        render_mcp_search()

def render_home_page():
    """Renderiza a p√°gina inicial."""
    st.markdown("""
    ## üéâ Bem-vindo ao Algoritmos Visualizador!

    ### Uma experi√™ncia completa de aprendizado contextualizado

    Explore algoritmos e estruturas de dados atrav√©s de **jornadas tem√°ticas**,
    entenda o **contexto hist√≥rico**, veja **aplica√ß√µes reais** e acompanhe seu
    **progresso personalizado** com visualiza√ß√µes interativas.
    """)

    # Destaque especial para exerc√≠cios pr√°ticos
    if EXERCICIOS_PRATICOS_DISPONIVEL:
        st.markdown("""
        <div style="
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 1.5rem;
            border-radius: 10px;
            margin: 1rem 0;
            border-left: 5px solid #ff6b6b;
        ">
        <h3 style="color: white; margin-top: 0;">üéØ üÜï Exerc√≠cios Pr√°ticos Interativos</h3>
        <p style="margin-bottom: 0.5rem;">
            <strong>Agora dispon√≠vel!</strong> Pratique com exerc√≠cios reais, receba feedback imediato
            e acompanhe seu progresso com estat√≠sticas detalhadas.
        </p>
        <ul style="margin-bottom: 0;">
            <li>‚úÖ M√∫ltipla escolha, verdadeiro/falso, ordena√ß√£o</li>
            <li>‚úÖ An√°lise de complexidade, debugging de c√≥digo</li>
            <li>‚úÖ Sistema de conquistas e gamifica√ß√£o</li>
            <li>‚úÖ Dashboard de performance e progresso</li>
        </ul>
        </div>
        """, unsafe_allow_html=True)

    # Destaque para aprendizado contextualizado
    if APRENDIZADO_CONTEXTUAL_DISPONIVEL:
        st.info("üéØ **Novo:** Sistema de Aprendizado Contextualizado dispon√≠vel! Explore jornadas tem√°ticas e conex√µes entre conceitos.")

    # M√©tricas gerais
    col1, col2, col3, col4, col5 = st.columns(5)

    with col1:
        st.metric("üìö M√≥dulos", "4", "Completos")

    with col2:
        st.metric("üéØ Algoritmos", "50+", "Implementados")

    with col3:
        st.metric("üèóÔ∏è Estruturas", "15+", "Visualizadas")

    with col4:
        st.metric("üíº Problemas", "25+", "de Entrevista")

    with col5:
        st.metric("üéØ Exerc√≠cios", "30+", "Interativos")
    
    # Cards dos m√≥dulos
    st.markdown("### üìã M√≥dulos Dispon√≠veis")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("""
        <div class="module-card">
            <h3>üìö M√≥dulo 1: Fundamentos</h3>
            <p>Algoritmos fundamentais como busca bin√°ria, dois ponteiros, 
            janela deslizante e opera√ß√µes com bits.</p>
            <ul>
                <li>üîç Busca Bin√°ria</li>
                <li>üë• Dois Ponteiros</li>
                <li>ü™ü Janela Deslizante</li>
                <li>üî¢ Opera√ß√µes com Bits</li>
            </ul>
        </div>
        """, unsafe_allow_html=True)
        
        st.markdown("""
        <div class="module-card">
            <h3>üéØ M√≥dulo 3: Programa√ß√£o Din√¢mica</h3>
            <p>Metodologia de 3 passos para resolver problemas de programa√ß√£o din√¢mica.</p>
            <ul>
                <li>üí™ For√ßa Bruta</li>
                <li>üß† Memoiza√ß√£o</li>
                <li>üìä Tabula√ß√£o</li>
                <li>üéØ Otimiza√ß√£o</li>
            </ul>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        st.markdown("""
        <div class="module-card">
            <h3>üèóÔ∏è M√≥dulo 2: Estruturas de Dados</h3>
            <p>Estruturas de dados avan√ßadas com visualiza√ß√µes detalhadas.</p>
            <ul>
                <li>üî∫ Heap (Min/Max)</li>
                <li>üå≥ Trie</li>
                <li>ü§ù Union-Find</li>
                <li>üìä Segment Tree</li>
            </ul>
        </div>
        """, unsafe_allow_html=True)
        
        st.markdown("""
        <div class="module-card">
            <h3>üíº M√≥dulo 4: Entrevistas</h3>
            <p>Simula√ß√£o de entrevistas t√©cnicas com feedback em tempo real.</p>
            <ul>
                <li>üéØ Problemas Cl√°ssicos</li>
                <li>üìä An√°lise de C√≥digo</li>
                <li>‚è±Ô∏è Simula√ß√£o de Tempo</li>
                <li>üìù Feedback Detalhado</li>
            </ul>
        </div>
        """, unsafe_allow_html=True)
    
    # Card especial para exerc√≠cios pr√°ticos
    st.markdown("### üéØ Sistema de Exerc√≠cios Pr√°ticos")
    
    st.markdown("""
    <div style="
        background: linear-gradient(135deg, #ff9a9e 0%, #fecfef 50%, #fecfef 100%);
        border: 2px solid #ff6b6b;
        border-radius: 10px;
        padding: 1.5rem;
        margin: 1rem 0;
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
    ">
    <h3 style="color: #d32f2f; margin-top: 0;">üéØ Exerc√≠cios Pr√°ticos Interativos</h3>
    <p style="margin-bottom: 1rem; color: #333;">
        <strong>Pratique de verdade!</strong> Resolva exerc√≠cios reais com valida√ß√£o autom√°tica,
        feedback imediato e acompanhamento de progresso.
    </p>
    <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 1rem;">
        <div>
            <h4 style="color: #d32f2f; margin-bottom: 0.5rem;">üìù Tipos de Exerc√≠cio</h4>
            <ul style="margin: 0; color: #555;">
                <li>M√∫ltipla escolha</li>
                <li>Verdadeiro/Falso</li>
                <li>Ordena√ß√£o de passos</li>
                <li>An√°lise de complexidade</li>
            </ul>
        </div>
        <div>
            <h4 style="color: #d32f2f; margin-bottom: 0.5rem;">üèÜ Recursos</h4>
            <ul style="margin: 0; color: #555;">
                <li>Feedback instant√¢neo</li>
                <li>Dashboard de progresso</li>
                <li>Sistema de conquistas</li>
                <li>Estat√≠sticas detalhadas</li>
            </ul>
        </div>
    </div>
    </div>
    """, unsafe_allow_html=True)
    
    # Se√ß√£o de recursos
    st.markdown("### ‚ö° Recursos Principais")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.markdown("""
        #### üéÆ Player Interativo
        - Controles de velocidade
        - Navega√ß√£o por passos
        - Personaliza√ß√£o de entrada
        - Compara√ß√£o de algoritmos
        """)
    
    with col2:
        st.markdown("""
        #### üé® Visualiza√ß√µes Din√¢micas
        - Gr√°ficos em tempo real
        - Anima√ß√µes passo a passo
        - M√∫ltiplas representa√ß√µes
        - An√°lise de complexidade
        """)
    
    with col3:
        st.markdown("""
        #### ü§ñ Integra√ß√£o MCP
        - An√°lise autom√°tica
        - Otimiza√ß√µes sugeridas
        - Feedback inteligente
        - Benchmarking avan√ßado
        """)

def render_module_1():
    """Renderiza o m√≥dulo 1 - Fundamentos."""
    st.markdown("## üìö M√≥dulo 1: Fundamentos")
    
    # Importar componentes do m√≥dulo 1
    try:
        from modulo_1_fundamentos.aplicacoes_reais import (
            SistemaBuscaLogs, DetectorFraudesFinanceiras, RedeSocialBFS
        )
        from modulo_1_fundamentos.busca_binaria import BuscaBinaria
        from modulo_1_fundamentos.dois_ponteiros import DoisPonteiros
        from modulo_1_fundamentos.janela_deslizante import JanelaDeslizante
        
        # Sele√ß√£o de aplica√ß√£o
        app = st.selectbox(
            "Escolha a Aplica√ß√£o",
            [
                "üîç Sistema de Busca em Logs",
                "üö® Detector de Fraudes", 
                "ÔøΩ Rede Social (BFS)",
                "üéØ Busca Bin√°ria Interativa",
                "‚ÜîÔ∏è Dois Ponteiros",
                "ü™ü Janela Deslizante"
            ]
        )
        
        if app == "ÔøΩ Sistema de Busca em Logs":
            render_log_search_system()
        elif app == "üö® Detector de Fraudes":
            render_fraud_detector()
        elif app == "üë• Rede Social (BFS)":
            render_social_network()
        elif app == "üéØ Busca Bin√°ria Interativa":
            render_binary_search()
        elif app == "‚ÜîÔ∏è Dois Ponteiros":
            render_two_pointers()
        elif app == "ü™ü Janela Deslizante":
            render_sliding_window()
            
    except ImportError as e:
        st.error(f"Erro ao importar m√≥dulo 1: {e}")
        st.info("Certifique-se de que todos os arquivos do m√≥dulo 1 est√£o presentes.")

def render_log_search_system():
    """Renderiza o sistema de busca em logs."""
    st.markdown("### üîç Sistema de Busca em Logs")
    
    try:
        from modulo_1_fundamentos.aplicacoes_reais import SistemaBuscaLogs
        
        # Inicializar sistema
        if 'log_system' not in st.session_state:
            st.session_state.log_system = SistemaBuscaLogs()
            # Adicionar alguns logs de exemplo
            base_time = time.time()
            logs_exemplo = [
                (base_time - 3600, "INFO: Sistema iniciado"),
                (base_time - 3000, "WARNING: Uso alto de CPU"),
                (base_time - 2400, "ERROR: Conex√£o falhou"),
                (base_time - 1800, "INFO: Backup conclu√≠do"),
                (base_time - 1200, "DEBUG: Cache limpo"),
                (base_time - 600, "INFO: Usu√°rio logado"),
                (base_time, "INFO: Sistema funcionando")
            ]
            for timestamp, msg in logs_exemplo:
                st.session_state.log_system.adicionar_log(timestamp, msg)
        
        sistema = st.session_state.log_system
        
        # Controles
        st.markdown("#### üéÆ Controles")
        col1, col2 = st.columns(2)
        
        with col1:
            novo_log = st.text_input("Nova Mensagem de Log")
            if st.button("Adicionar Log"):
                sistema.adicionar_log(time.time(), novo_log)
                st.success("Log adicionado!")
        
        with col2:
            horas_atras = st.slider("Buscar logs das √∫ltimas X horas", 1, 24, 6)
            
        # Buscar logs
        fim = time.time()
        inicio = fim - (horas_atras * 3600)
        logs_encontrados = sistema.buscar_logs_periodo(inicio, fim)
        
        # Visualiza√ß√£o
        st.markdown("#### üìä Logs Encontrados")
        
        if logs_encontrados:
            for timestamp, mensagem in logs_encontrados:
                dt = datetime.fromtimestamp(timestamp)
                st.markdown(f"""
                <div class="algorithm-step">
                    <strong>{dt.strftime('%Y-%m-%d %H:%M:%S')}</strong><br>
                    {mensagem}
                </div>
                """, unsafe_allow_html=True)
        
        # M√©tricas
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("Total de Logs", len(sistema.logs))
        with col2:
            st.metric("Logs Encontrados", len(logs_encontrados))
        with col3:
            st.markdown('<span class="complexity-badge">O(log n)</span>', unsafe_allow_html=True)
            
    except Exception as e:
        st.error(f"Erro no sistema de logs: {e}")

def render_fraud_detector():
    """Renderiza o detector de fraudes."""
    st.markdown("### üö® Detector de Fraudes")
    
    try:
        from modulo_1_fundamentos.aplicacoes_reais import DetectorFraudesFinanceiras
        
        # Inicializar detector
        if 'fraud_detector' not in st.session_state:
            st.session_state.fraud_detector = DetectorFraudesFinanceiras()
        
        detector = st.session_state.fraud_detector
        
        # Controles
        st.markdown("#### üéÆ Controles")
        col1, col2 = st.columns(2)
        
        with col1:
            valor = st.number_input("Valor da Transa√ß√£o", min_value=0.0, value=1000.0)
            localizacao = st.selectbox("Localiza√ß√£o", ["Brasil", "EUA", "China", "R√∫ssia"])
            
        with col2:
            horario = st.slider("Hora da Transa√ß√£o", 0, 23, 14)
            usuario_id = st.number_input("ID do Usu√°rio", min_value=1, value=123)
        
        # Adicionar transa√ß√£o
        if st.button("Analisar Transa√ß√£o"):
            eh_fraude = detector.analisar_transacao(valor, localizacao, horario, usuario_id)
            
            if eh_fraude:
                st.error("üö® FRAUDE DETECTADA!")
                st.markdown("""
                <div class="error-badge">
                    Transa√ß√£o suspeita identificada pelos algoritmos de detec√ß√£o
                </div>
                """, unsafe_allow_html=True)
            else:
                st.success("‚úÖ Transa√ß√£o Normal")
                st.markdown("""
                <div class="complexity-badge">
                    Transa√ß√£o aprovada pelos sistemas de seguran√ßa
                </div>
                """, unsafe_allow_html=True)
        
        # Estat√≠sticas
        st.markdown("#### üìä Estat√≠sticas")
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.metric("Transa√ß√µes Analisadas", len(detector.historico_transacoes))
        with col2:
            fraudes = sum(1 for t in detector.historico_transacoes if t.get('fraude', False))
            st.metric("Fraudes Detectadas", fraudes)
        with col3:
            st.markdown('<span class="complexity-badge">O(n)</span>', unsafe_allow_html=True)
            
    except Exception as e:
        st.error(f"Erro no detector de fraudes: {e}")

def render_social_network():
    """Renderiza a rede social com BFS."""
    st.markdown("### üë• Rede Social (BFS)")
    
    try:
        from modulo_1_fundamentos.aplicacoes_reais import RedeSocialBFS
        
        # Inicializar rede
        if 'social_network' not in st.session_state:
            st.session_state.social_network = RedeSocialBFS()
            # Adicionar usu√°rios de exemplo
            usuarios = ["Alice", "Bob", "Charlie", "Diana", "Eve", "Frank"]
            for usuario in usuarios:
                st.session_state.social_network.adicionar_usuario(usuario)
            
            # Adicionar conex√µes
            conexoes = [
                ("Alice", "Bob"), ("Alice", "Charlie"), ("Bob", "Diana"),
                ("Charlie", "Eve"), ("Diana", "Frank"), ("Eve", "Frank")
            ]
            for u1, u2 in conexoes:
                st.session_state.social_network.adicionar_conexao(u1, u2)
        
        rede = st.session_state.social_network
        
        # Controles
        st.markdown("#### üéÆ Controles")
        col1, col2 = st.columns(2)
        
        with col1:
            usuarios = list(rede.grafo.keys())
            usuario_origem = st.selectbox("Usu√°rio de Origem", usuarios)
            usuario_destino = st.selectbox("Usu√°rio de Destino", usuarios)
        
        with col2:
            novo_usuario = st.text_input("Novo Usu√°rio")
            if st.button("Adicionar Usu√°rio"):
                rede.adicionar_usuario(novo_usuario)
                st.success(f"Usu√°rio {novo_usuario} adicionado!")
        
        # Buscar caminho
        if st.button("Encontrar Caminho"):
            caminho = rede.encontrar_caminho(usuario_origem, usuario_destino)
            
            if caminho:
                st.success(f"Caminho encontrado: {' ‚Üí '.join(caminho)}")
                st.markdown(f"""
                <div class="algorithm-step">
                    <strong>Dist√¢ncia:</strong> {len(caminho) - 1} conex√µes<br>
                    <strong>Caminho:</strong> {' ‚Üí '.join(caminho)}
                </div>
                """, unsafe_allow_html=True)
            else:
                st.error("Nenhum caminho encontrado!")
        
        # Visualiza√ß√£o da rede
        st.markdown("#### üåê Visualiza√ß√£o da Rede")
        
        # Criar grafo visual
        try:
            import networkx as nx
            
            G = nx.Graph()
            for usuario in rede.grafo.keys():
                G.add_node(usuario)
            
            for usuario, conexoes in rede.grafo.items():
                for conexao in conexoes:
                    G.add_edge(usuario, conexao)
            
            # Posicionamento dos n√≥s
            pos = nx.spring_layout(G)
            
            # Plotar com matplotlib
            fig, ax = plt.subplots(figsize=(10, 8))
            nx.draw(G, pos, with_labels=True, node_color='lightblue', 
                   node_size=1500, font_size=10, font_weight='bold', ax=ax)
            ax.set_title("Rede Social - Grafo de Conex√µes")
            st.pyplot(fig)
            
        except ImportError:
            st.info("NetworkX n√£o dispon√≠vel. Mostrando conex√µes em lista:")
            for usuario, conexoes in rede.grafo.items():
                st.write(f"**{usuario}**: {', '.join(conexoes)}")
        
        # M√©tricas
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("Usu√°rios", len(rede.grafo))
        with col2:
            total_conexoes = sum(len(conexoes) for conexoes in rede.grafo.values()) // 2
            st.metric("Conex√µes", total_conexoes)
        with col3:
            st.markdown('<span class="complexity-badge">O(V + E)</span>', unsafe_allow_html=True)
            
    except Exception as e:
        st.error(f"Erro na rede social: {e}")

def render_binary_search():
    """Renderiza a visualiza√ß√£o de busca bin√°ria interativa."""
    st.markdown("### üéØ Busca Bin√°ria Interativa")
    
    # Player controls
    st.markdown("#### üéÆ Controles")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        array_size = st.slider("Tamanho do Array", 5, 50, 20)
        
    with col2:
        target = st.number_input("Valor a Buscar", value=25)
        
    with col3:
        speed = st.slider("Velocidade", 1, 10, 5)
    
    # Gerar array ordenado
    arr = sorted(np.random.randint(1, 100, array_size))
    
    # Visualiza√ß√£o
    st.markdown("#### üìä Visualiza√ß√£o")
    
    # Implementar busca bin√°ria com passos
    def binary_search_steps(arr, target):
        steps = []
        left, right = 0, len(arr) - 1
        
        while left <= right:
            mid = (left + right) // 2
            steps.append({
                'left': left,
                'right': right,
                'mid': mid,
                'comparison': arr[mid],
                'found': arr[mid] == target
            })
            
            if arr[mid] == target:
                break
            elif arr[mid] < target:
                left = mid + 1
            else:
                right = mid - 1
        
        return steps
    
    steps = binary_search_steps(arr, target)
    
    # Controles de navega√ß√£o
    step = st.slider("Passo", 0, len(steps) - 1, 0) if steps else 0
    
    if steps:
        current_step = steps[step]
        
        # Mostrar array com destaque
        colors = ['lightblue'] * len(arr)
        
        # Destacar regi√£o atual
        for i in range(current_step['left'], current_step['right'] + 1):
            colors[i] = 'lightgreen'
        
        # Destacar mid
        colors[current_step['mid']] = 'red'
        
        # Gr√°fico de barras
        fig, ax = plt.subplots(figsize=(12, 6))
        bars = ax.bar(range(len(arr)), arr, color=colors)
        ax.set_title(f"Busca Bin√°ria - Passo {step + 1}")
        ax.set_xlabel("√çndice")
        ax.set_ylabel("Valor")
        
        # Adicionar anota√ß√µes
        ax.axvline(current_step['left'], color='green', linestyle='--', alpha=0.7, label='Left')
        ax.axvline(current_step['right'], color='green', linestyle='--', alpha=0.7, label='Right')
        ax.axvline(current_step['mid'], color='red', linestyle='-', alpha=0.7, label='Mid')
        
        ax.legend()
        st.pyplot(fig)
        
        # Informa√ß√µes do passo
        st.markdown(f"""
        <div class="algorithm-step">
            <strong>Passo {step + 1}:</strong><br>
            Left: {current_step['left']}, Right: {current_step['right']}, Mid: {current_step['mid']}<br>
            Comparando: {current_step['comparison']} vs {target}<br>
            {"‚úÖ Encontrado!" if current_step['found'] else "‚è≠Ô∏è Continuando..."}
        </div>
        """, unsafe_allow_html=True)
    
    # M√©tricas
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric("Array Size", len(arr))
    
    with col2:
        st.metric("Passos", len(steps))
    
    with col3:
        complexity = "O(log n)"
        st.markdown(f'<span class="complexity-badge">{complexity}</span>', unsafe_allow_html=True)

def render_two_pointers():
    """Renderiza a visualiza√ß√£o de dois ponteiros."""
    st.markdown("### ‚ÜîÔ∏è Dois Ponteiros")
    
    # Sele√ß√£o de problema
    problema = st.selectbox(
        "Escolha o Problema",
        [
            "üéØ Two Sum (Array Ordenado)",
            "üîÑ Verificar Pal√≠ndromo",
            "üé® Container with Most Water"
        ]
    )
    
    if problema == "üéØ Two Sum (Array Ordenado)":
        render_two_sum()
    elif problema == "üîÑ Verificar Pal√≠ndromo":
        render_palindrome_check()
    elif problema == "üé® Container with Most Water":
        render_container_water()

def render_two_sum():
    """Renderiza Two Sum com dois ponteiros."""
    st.markdown("#### üéØ Two Sum - Array Ordenado")
    
    # Controles
    col1, col2 = st.columns(2)
    
    with col1:
        array_size = st.slider("Tamanho do Array", 5, 20, 10)
        target_sum = st.number_input("Soma Alvo", value=15)
    
    with col2:
        arr = sorted(np.random.randint(1, 20, array_size))
        st.write("Array:", arr)
    
    # Algoritmo Two Sum
    def two_sum_steps(arr, target):
        steps = []
        left, right = 0, len(arr) - 1
        
        while left < right:
            current_sum = arr[left] + arr[right]
            steps.append({
                'left': left,
                'right': right,
                'left_val': arr[left],
                'right_val': arr[right],
                'sum': current_sum,
                'found': current_sum == target
            })
            
            if current_sum == target:
                break
            elif current_sum < target:
                left += 1
            else:
                right -= 1
        
        return steps
    
    steps = two_sum_steps(arr, target_sum)
    
    if steps:
        step = st.slider("Passo", 0, len(steps) - 1, 0)
        current_step = steps[step]
        
        # Visualiza√ß√£o
        colors = ['lightblue'] * len(arr)
        colors[current_step['left']] = 'red'
        colors[current_step['right']] = 'red'
        
        fig, ax = plt.subplots(figsize=(12, 6))
        bars = ax.bar(range(len(arr)), arr, color=colors)
        ax.set_title(f"Two Sum - Passo {step + 1}")
        ax.set_xlabel("√çndice")
        ax.set_ylabel("Valor")
        
        # Anota√ß√µes
        ax.axvline(current_step['left'], color='red', linestyle='--', alpha=0.7, label='Left')
        ax.axvline(current_step['right'], color='red', linestyle='--', alpha=0.7, label='Right')
        
        ax.legend()
        st.pyplot(fig)
        
        # Informa√ß√µes
        st.markdown(f"""
        <div class="algorithm-step">
            <strong>Passo {step + 1}:</strong><br>
            Left: {current_step['left']} (valor: {current_step['left_val']})<br>
            Right: {current_step['right']} (valor: {current_step['right_val']})<br>
            Soma: {current_step['sum']} (alvo: {target_sum})<br>
            {"‚úÖ Encontrado!" if current_step['found'] else "‚è≠Ô∏è Continuando..."}
        </div>
        """, unsafe_allow_html=True)

def render_palindrome_check():
    """Renderiza verifica√ß√£o de pal√≠ndromo."""
    st.markdown("#### üîÑ Verificar Pal√≠ndromo")
    
    # Controles
    texto = st.text_input("Digite um texto", value="A man a plan a canal Panama")
    
    # Limpar texto
    texto_limpo = ''.join(c.lower() for c in texto if c.isalnum())
    
    # Algoritmo de verifica√ß√£o
    def palindrome_steps(s):
        steps = []
        left, right = 0, len(s) - 1
        
        while left < right:
            steps.append({
                'left': left,
                'right': right,
                'left_char': s[left],
                'right_char': s[right],
                'match': s[left] == s[right]
            })
            
            if s[left] != s[right]:
                break
            
            left += 1
            right -= 1
        
        return steps
    
    if texto_limpo:
        steps = palindrome_steps(texto_limpo)
        
        # Mostrar texto limpo
        st.write(f"Texto processado: **{texto_limpo}**")
        
        if steps:
            step = st.slider("Passo", 0, len(steps) - 1, 0)
            current_step = steps[step]
            
            # Visualiza√ß√£o
            chars = list(texto_limpo)
            colors = ['lightblue'] * len(chars)
            colors[current_step['left']] = 'red'
            colors[current_step['right']] = 'red'
            
            # Mostrar caracteres
            col_chars = st.columns(len(chars))
            for i, (char, color) in enumerate(zip(chars, colors)):
                with col_chars[i]:
                    if color == 'red':
                        st.markdown(f"**:red[{char}]**")
                    else:
                        st.markdown(f"{char}")
            
            # Informa√ß√µes
            st.markdown(f"""
            <div class="algorithm-step">
                <strong>Passo {step + 1}:</strong><br>
                Left: {current_step['left']} ('{current_step['left_char']}')<br>
                Right: {current_step['right']} ('{current_step['right_char']}')<br>
                {"‚úÖ Caracteres coincidem!" if current_step['match'] else "‚ùå N√£o √© pal√≠ndromo"}
            </div>
            """, unsafe_allow_html=True)

def render_container_water():
    """Renderiza Container with Most Water."""
    st.markdown("#### üé® Container with Most Water")
    
    # Controles
    array_size = st.slider("N√∫mero de Linhas", 5, 15, 8)
    heights = np.random.randint(1, 20, array_size)
    
    # Mostrar alturas
    st.write("Alturas:", heights.tolist())
    
    # Algoritmo
    def container_steps(heights):
        steps = []
        left, right = 0, len(heights) - 1
        max_area = 0
        
        while left < right:
            width = right - left
            area = min(heights[left], heights[right]) * width
            max_area = max(max_area, area)
            
            steps.append({
                'left': left,
                'right': right,
                'left_height': heights[left],
                'right_height': heights[right],
                'width': width,
                'area': area,
                'max_area': max_area
            })
            
            if heights[left] < heights[right]:
                left += 1
            else:
                right -= 1
        
        return steps
    
    steps = container_steps(heights)
    
    if steps:
        step = st.slider("Passo", 0, len(steps) - 1, 0)
        current_step = steps[step]
        
        # Visualiza√ß√£o
        fig, ax = plt.subplots(figsize=(12, 6))
        
        # Desenhar barras
        colors = ['lightblue'] * len(heights)
        colors[current_step['left']] = 'red'
        colors[current_step['right']] = 'red'
        
        bars = ax.bar(range(len(heights)), heights, color=colors)
        
        # Desenhar container
        left_idx = current_step['left']
        right_idx = current_step['right']
        container_height = min(heights[left_idx], heights[right_idx])
        
        # √Årea do container
        ax.fill_between([left_idx, right_idx], 0, container_height, 
                       alpha=0.3, color='blue', label='Container')
        
        ax.set_title(f"Container with Most Water - Passo {step + 1}")
        ax.set_xlabel("Posi√ß√£o")
        ax.set_ylabel("Altura")
        ax.legend()
        
        st.pyplot(fig)
        
        # Informa√ß√µes
        st.markdown(f"""
        <div class="algorithm-step">
            <strong>Passo {step + 1}:</strong><br>
            Left: {current_step['left']} (altura: {current_step['left_height']})<br>
            Right: {current_step['right']} (altura: {current_step['right_height']})<br>
            Largura: {current_step['width']}<br>
            √Årea atual: {current_step['area']}<br>
            Maior √°rea: {current_step['max_area']}
        </div>
        """, unsafe_allow_html=True)

def render_sliding_window():
    """Renderiza a visualiza√ß√£o de janela deslizante."""
    st.markdown("### ü™ü Janela Deslizante")
    
    # Sele√ß√£o de problema
    problema = st.selectbox(
        "Escolha o Problema",
        [
            "üìä Soma M√°xima de Subarray (Tamanho K)",
            "üîç Substring mais longa sem repeti√ß√£o",
            "üéØ M√≠nimo em Janela Deslizante"
        ]
    )
    
    if problema == "üìä Soma M√°xima de Subarray (Tamanho K)":
        render_max_sum_subarray()
    elif problema == "üîç Substring mais longa sem repeti√ß√£o":
        render_longest_substring()
    elif problema == "üéØ M√≠nimo em Janela Deslizante":
        render_sliding_window_minimum()

def render_max_sum_subarray():
    """Renderiza soma m√°xima de subarray com janela deslizante."""
    st.markdown("#### üìä Soma M√°xima de Subarray (Tamanho K)")
    
    # Controles
    col1, col2 = st.columns(2)
    
    with col1:
        array_size = st.slider("Tamanho do Array", 5, 20, 10)
        k = st.slider("Tamanho da Janela (K)", 2, min(array_size, 5), 3)
    
    with col2:
        arr = np.random.randint(-10, 20, array_size)
        st.write("Array:", arr.tolist())
    
    # Algoritmo
    def sliding_window_max_sum(arr, k):
        if len(arr) < k:
            return []
        
        steps = []
        window_sum = sum(arr[:k])
        max_sum = window_sum
        
        steps.append({
            'start': 0,
            'end': k-1,
            'window': arr[:k].tolist(),
            'sum': window_sum,
            'max_sum': max_sum
        })
        
        for i in range(1, len(arr) - k + 1):
            window_sum = window_sum - arr[i-1] + arr[i+k-1]
            max_sum = max(max_sum, window_sum)
            
            steps.append({
                'start': i,
                'end': i+k-1,
                'window': arr[i:i+k].tolist(),
                'sum': window_sum,
                'max_sum': max_sum
            })
        
        return steps
    
    steps = sliding_window_max_sum(arr, k)
    
    if steps:
        step = st.slider("Passo", 0, len(steps) - 1, 0)
        current_step = steps[step]
        
        # Visualiza√ß√£o
        colors = ['lightblue'] * len(arr)
        for i in range(current_step['start'], current_step['end'] + 1):
            colors[i] = 'red'
        
        fig, ax = plt.subplots(figsize=(12, 6))
        bars = ax.bar(range(len(arr)), arr, color=colors)
        
        # Destacar janela
        ax.axvspan(current_step['start'] - 0.5, current_step['end'] + 0.5, 
                  alpha=0.3, color='yellow', label='Janela')
        
        ax.set_title(f"Janela Deslizante - Passo {step + 1}")
        ax.set_xlabel("√çndice")
        ax.set_ylabel("Valor")
        ax.legend()
        
        st.pyplot(fig)
        
        # Informa√ß√µes
        st.markdown(f"""
        <div class="algorithm-step">
            <strong>Passo {step + 1}:</strong><br>
            Janela: [{current_step['start']} - {current_step['end']}]<br>
            Valores: {current_step['window']}<br>
            Soma atual: {current_step['sum']}<br>
            Soma m√°xima: {current_step['max_sum']}
        </div>
        """, unsafe_allow_html=True)

def render_longest_substring():
    """Renderiza substring mais longa sem repeti√ß√£o."""
    st.markdown("#### üîç Substring mais longa sem repeti√ß√£o")
    
    # Controles
    texto = st.text_input("Digite um texto", value="abcabcbb")
    
    # Algoritmo
    def longest_substring_steps(s):
        steps = []
        left = 0
        char_set = set()
        max_len = 0
        
        for right in range(len(s)):
            while s[right] in char_set:
                char_set.remove(s[left])
                left += 1
            
            char_set.add(s[right])
            max_len = max(max_len, right - left + 1)
            
            steps.append({
                'left': left,
                'right': right,
                'substring': s[left:right+1],
                'length': right - left + 1,
                'max_length': max_len,
                'char_set': sorted(list(char_set))
            })
        
        return steps
    
    if texto:
        steps = longest_substring_steps(texto)
        
        if steps:
            step = st.slider("Passo", 0, len(steps) - 1, 0)
            current_step = steps[step]
            
            # Visualiza√ß√£o
            chars = list(texto)
            colors = ['lightblue'] * len(chars)
            
            for i in range(current_step['left'], current_step['right'] + 1):
                colors[i] = 'red'
            
            # Mostrar caracteres
            col_chars = st.columns(len(chars))
            for i, (char, color) in enumerate(zip(chars, colors)):
                with col_chars[i]:
                    if color == 'red':
                        st.markdown(f"**:red[{char}]**")
                    else:
                        st.markdown(f"{char}")
            
            # Informa√ß√µes
            st.markdown(f"""
            <div class="algorithm-step">
                <strong>Passo {step + 1}:</strong><br>
                Janela: [{current_step['left']} - {current_step['right']}]<br>
                Substring: "{current_step['substring']}"<br>
                Comprimento atual: {current_step['length']}<br>
                Comprimento m√°ximo: {current_step['max_length']}<br>
                Caracteres √∫nicos: {current_step['char_set']}
            </div>
            """, unsafe_allow_html=True)

def render_sliding_window_minimum():
    """Renderiza m√≠nimo em janela deslizante."""
    st.markdown("#### üéØ M√≠nimo em Janela Deslizante")
    st.info("Implementa√ß√£o em desenvolvimento...")

def render_module_2():
    """Renderiza o m√≥dulo 2 - Estruturas de Dados."""
    st.markdown("## üèóÔ∏è M√≥dulo 2: Estruturas de Dados")
    
    try:
        from modulo_2_estruturas_dados.estruturas_avancadas import (
            AdvancedHeap, Trie, UnionFind, SegmentTree, LRUCache, Graph
        )
        
        # Sele√ß√£o de estrutura
        estrutura = st.selectbox(
            "Escolha a Estrutura de Dados",
            [
                "üî∫ Heap (Min/Max)",
                "üå≥ Trie (√Årvore de Prefixos)",
                "ü§ù Union-Find",
                "üìä Segment Tree",
                "üíæ LRU Cache",
                "üåê Graph (Grafo)"
            ]
        )
        
        if estrutura == "üî∫ Heap (Min/Max)":
            render_heap_structure()
        elif estrutura == "üå≥ Trie (√Årvore de Prefixos)":
            render_trie_structure()
        elif estrutura == "ü§ù Union-Find":
            render_union_find_structure()
        elif estrutura == "üìä Segment Tree":
            render_segment_tree_structure()
        elif estrutura == "üíæ LRU Cache":
            render_lru_cache_structure()
        elif estrutura == "üåê Graph (Grafo)":
            render_graph_structure()
            
    except ImportError as e:
        st.error(f"Erro ao importar m√≥dulo 2: {e}")
        st.info("Certifique-se de que todos os arquivos do m√≥dulo 2 est√£o presentes.")

def render_heap_structure():
    """Renderiza a estrutura Heap."""
    st.markdown("### üî∫ Heap (Min/Max)")
    
    try:
        from modulo_2_estruturas_dados.estruturas_avancadas import AdvancedHeap
        
        # Inicializar heap
        if 'heap' not in st.session_state:
            st.session_state.heap = AdvancedHeap()
        
        heap = st.session_state.heap
        
        # Controles
        col1, col2, col3 = st.columns(3)
        
        with col1:
            valor = st.number_input("Valor", value=10)
            if st.button("Inserir"):
                heap.insert(valor)
                st.success(f"Valor {valor} inserido!")
        
        with col2:
            if st.button("Extrair M√≠nimo"):
                if heap.heap:
                    min_val = heap.extract_min()
                    st.success(f"M√≠nimo extra√≠do: {min_val}")
                else:
                    st.error("Heap vazio!")
        
        with col3:
            if st.button("Limpar Heap"):
                st.session_state.heap = AdvancedHeap()
                st.success("Heap limpo!")
        
        # Visualiza√ß√£o
        if heap.heap:
            st.markdown("#### üìä Visualiza√ß√£o do Heap")
            
            # Mostrar estrutura
            st.write("**Estrutura do Heap:**", heap.heap)
            
            # Gr√°fico de barras
            fig, ax = plt.subplots(figsize=(10, 6))
            bars = ax.bar(range(len(heap.heap)), heap.heap, color='lightblue')
            ax.set_title("Heap - Estrutura Atual")
            ax.set_xlabel("√çndice")
            ax.set_ylabel("Valor")
            
            # Destacar m√≠nimo
            if heap.heap:
                bars[0].set_color('red')
                ax.annotate(f'MIN: {heap.heap[0]}', xy=(0, heap.heap[0]), 
                           xytext=(0, heap.heap[0] + 2), ha='center',
                           arrowprops=dict(arrowstyle='->', color='red'))
            
            st.pyplot(fig)
            
            # Opera√ß√µes
            st.markdown("#### üîç Opera√ß√µes")
            operacoes = heap.get_operations()
            
            for i, op in enumerate(operacoes[-10:]):  # √öltimas 10 opera√ß√µes
                st.markdown(f"""
                <div class="algorithm-step">
                    <strong>Opera√ß√£o {i+1}:</strong> {op['operation']} 
                    {f"(valor: {op['value']})" if 'value' in op else ""}
                </div>
                """, unsafe_allow_html=True)
        
        # M√©tricas
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("Tamanho", len(heap.heap))
        with col2:
            st.metric("M√≠nimo", heap.heap[0] if heap.heap else "N/A")
        with col3:
            st.markdown('<span class="complexity-badge">O(log n)</span>', unsafe_allow_html=True)
            
    except Exception as e:
        st.error(f"Erro no Heap: {e}")

def render_trie_structure():
    """Renderiza a estrutura Trie."""
    st.markdown("### üå≥ Trie (√Årvore de Prefixos)")
    
    try:
        from modulo_2_estruturas_dados.estruturas_avancadas import Trie
        
        # Inicializar trie
        if 'trie' not in st.session_state:
            st.session_state.trie = Trie()
            # Adicionar palavras de exemplo
            palavras_exemplo = ["apple", "app", "apricot", "banana", "band", "bandana"]
            for palavra in palavras_exemplo:
                st.session_state.trie.insert(palavra)
        
        trie = st.session_state.trie
        
        # Controles
        col1, col2 = st.columns(2)
        
        with col1:
            nova_palavra = st.text_input("Nova Palavra")
            if st.button("Inserir Palavra"):
                trie.insert(nova_palavra)
                st.success(f"Palavra '{nova_palavra}' inserida!")
        
        with col2:
            busca_palavra = st.text_input("Buscar Palavra")
            if st.button("Buscar"):
                encontrada = trie.search(busca_palavra)
                if encontrada:
                    st.success(f"‚úÖ Palavra '{busca_palavra}' encontrada!")
                else:
                    st.error(f"‚ùå Palavra '{busca_palavra}' n√£o encontrada!")
        
        # Busca por prefixo
        st.markdown("#### üîç Busca por Prefixo")
        prefixo = st.text_input("Digite um prefixo")
        
        if prefixo:
            palavras_prefixo = trie.get_words_with_prefix(prefixo)
            if palavras_prefixo:
                st.success(f"Palavras com prefixo '{prefixo}':")
                for palavra in palavras_prefixo:
                    st.write(f"- {palavra}")
            else:
                st.info(f"Nenhuma palavra encontrada com prefixo '{prefixo}'")
        
        # Estat√≠sticas
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("Opera√ß√µes", len(trie.get_operations()))
        with col2:
            st.metric("Prefixos", len(trie.get_words_with_prefix("")) if hasattr(trie, 'get_words_with_prefix') else "N/A")
        with col3:
            st.markdown('<span class="complexity-badge">O(m)</span>', unsafe_allow_html=True)
            
    except Exception as e:
        st.error(f"Erro no Trie: {e}")

def render_union_find_structure():
    """Renderiza a estrutura Union-Find."""
    st.markdown("### ü§ù Union-Find")
    
    try:
        from modulo_2_estruturas_dados.estruturas_avancadas import UnionFind
        
        # Inicializar Union-Find
        if 'union_find' not in st.session_state:
            st.session_state.union_find = UnionFind(10)
        
        uf = st.session_state.union_find
        
        # Controles
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("#### üîó Conectar Elementos")
            elem1 = st.number_input("Elemento 1", min_value=0, max_value=9, value=0)
            elem2 = st.number_input("Elemento 2", min_value=0, max_value=9, value=1)
            
            if st.button("Conectar"):
                uf.union(elem1, elem2)
                st.success(f"Elementos {elem1} e {elem2} conectados!")
        
        with col2:
            st.markdown("#### üîç Verificar Conex√£o")
            check1 = st.number_input("Verificar 1", min_value=0, max_value=9, value=0)
            check2 = st.number_input("Verificar 2", min_value=0, max_value=9, value=1)
            
            if st.button("Verificar"):
                conectados = uf.connected(check1, check2)
                if conectados:
                    st.success(f"‚úÖ Elementos {check1} e {check2} est√£o conectados!")
                else:
                    st.error(f"‚ùå Elementos {check1} e {check2} n√£o est√£o conectados!")
        
        # Visualiza√ß√£o
        st.markdown("#### üåê Visualiza√ß√£o dos Componentes")
        
        # Mostrar componentes
        componentes = {}
        for i in range(10):
            root = uf.find(i)
            if root not in componentes:
                componentes[root] = []
            componentes[root].append(i)
        
        for root, elementos in componentes.items():
            st.markdown(f"""
            <div class="algorithm-step">
                <strong>Componente {root}:</strong> {elementos}
            </div>
            """, unsafe_allow_html=True)
        
        # M√©tricas
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("Componentes", len(componentes))
        with col2:
            st.metric("Opera√ß√µes", len(uf.get_operations()))
        with col3:
            st.markdown('<span class="complexity-badge">O(Œ±(n))</span>', unsafe_allow_html=True)
            
    except Exception as e:
        st.error(f"Erro no Union-Find: {e}")

def render_segment_tree_structure():
    """Renderiza a estrutura Segment Tree."""
    st.markdown("### üìä Segment Tree")
    
    try:
        from modulo_2_estruturas_dados.estruturas_avancadas import SegmentTree
        
        # Inicializar Segment Tree
        if 'segment_tree' not in st.session_state:
            arr = [1, 3, 5, 7, 9, 11]
            st.session_state.segment_tree = SegmentTree(arr)
        
        seg_tree = st.session_state.segment_tree
        
        # Controles
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("#### üìù Atualizar Valor")
            index = st.number_input("√çndice", min_value=0, max_value=len(seg_tree.arr)-1, value=0)
            new_value = st.number_input("Novo Valor", value=10)
            
            if st.button("Atualizar"):
                seg_tree.update(index, new_value)
                st.success(f"Valor no √≠ndice {index} atualizado para {new_value}!")
        
        with col2:
            st.markdown("#### üîç Consulta de Soma")
            left = st.number_input("√çndice Esquerdo", min_value=0, max_value=len(seg_tree.arr)-1, value=0)
            right = st.number_input("√çndice Direito", min_value=0, max_value=len(seg_tree.arr)-1, value=2)
            
            if st.button("Consultar"):
                soma = seg_tree.query(left, right)
                st.success(f"Soma do intervalo [{left}, {right}]: {soma}")
        
        # Visualiza√ß√£o
        st.markdown("#### üìä Array Atual")
        st.write(seg_tree.arr)
        
        # Gr√°fico
        fig, ax = plt.subplots(figsize=(10, 6))
        bars = ax.bar(range(len(seg_tree.arr)), seg_tree.arr, color='lightblue')
        ax.set_title("Segment Tree - Array")
        ax.set_xlabel("√çndice")
        ax.set_ylabel("Valor")
        
        st.pyplot(fig)
        
        # M√©tricas
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("Tamanho", len(seg_tree.arr))
        with col2:
            st.metric("Opera√ß√µes", len(seg_tree.get_operations()))
        with col3:
            st.markdown('<span class="complexity-badge">O(log n)</span>', unsafe_allow_html=True)
            
    except Exception as e:
        st.error(f"Erro no Segment Tree: {e}")

def render_lru_cache_structure():
    """Renderiza a estrutura LRU Cache."""
    st.markdown("### üíæ LRU Cache")
    
    try:
        from modulo_2_estruturas_dados.estruturas_avancadas import LRUCache
        
        # Inicializar LRU Cache
        if 'lru_cache' not in st.session_state:
            st.session_state.lru_cache = LRUCache(4)
        
        cache = st.session_state.lru_cache
        
        # Controles
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("#### üìù Adicionar/Atualizar")
            key = st.text_input("Chave")
            value = st.text_input("Valor")
            
            if st.button("Adicionar"):
                cache.put(key, value)
                st.success(f"Chave '{key}' adicionada com valor '{value}'!")
        
        with col2:
            st.markdown("#### üîç Buscar")
            search_key = st.text_input("Buscar Chave")
            
            if st.button("Buscar"):
                result = cache.get(search_key)
                if result != -1:
                    st.success(f"Valor encontrado: {result}")
                else:
                    st.error(f"Chave '{search_key}' n√£o encontrada!")
        
        # Visualiza√ß√£o do cache
        st.markdown("#### üíæ Estado do Cache")
        
        # Mostrar cache atual
        if hasattr(cache, 'cache') and cache.cache:
            cache_items = list(cache.cache.items())
            for i, (key, node) in enumerate(cache_items):
                st.markdown(f"""
                <div class="algorithm-step">
                    <strong>Posi√ß√£o {i+1}:</strong> {key} ‚Üí {node.value}
                </div>
                """, unsafe_allow_html=True)
        else:
            st.info("Cache vazio")
        
        # M√©tricas
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("Capacidade", cache.capacity)
        with col2:
            current_size = len(cache.cache) if hasattr(cache, 'cache') else 0
            st.metric("Tamanho Atual", current_size)
        with col3:
            st.markdown('<span class="complexity-badge">O(1)</span>', unsafe_allow_html=True)
            
    except Exception as e:
        st.error(f"Erro no LRU Cache: {e}")

def render_graph_structure():
    """Renderiza a estrutura Graph."""
    st.markdown("### üåê Graph (Grafo)")
    
    try:
        from modulo_2_estruturas_dados.estruturas_avancadas import Graph
        
        # Inicializar Graph
        if 'graph' not in st.session_state:
            st.session_state.graph = Graph()
            # Adicionar n√≥s e arestas de exemplo
            nodes = ["A", "B", "C", "D", "E"]
            edges = [("A", "B"), ("B", "C"), ("C", "D"), ("A", "E"), ("E", "D")]
            
            for node in nodes:
                st.session_state.graph.add_node(node)
            for u, v in edges:
                st.session_state.graph.add_edge(u, v)
        
        graph = st.session_state.graph
        
        # Controles
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("#### üìù Adicionar N√≥/Aresta")
            new_node = st.text_input("Novo N√≥")
            if st.button("Adicionar N√≥"):
                graph.add_node(new_node)
                st.success(f"N√≥ '{new_node}' adicionado!")
        
        with col2:
            st.markdown("#### üîó Conectar N√≥s")
            node1 = st.text_input("N√≥ 1")
            node2 = st.text_input("N√≥ 2")
            if st.button("Adicionar Aresta"):
                graph.add_edge(node1, node2)
                st.success(f"Aresta {node1} ‚Üî {node2} adicionada!")
        
        # Algoritmos
        st.markdown("#### üîç Algoritmos")
        col1, col2 = st.columns(2)
        
        with col1:
            start_node = st.selectbox("N√≥ de In√≠cio", list(graph.graph.keys()))
            if st.button("BFS"):
                result = graph.bfs(start_node)
                st.success(f"BFS: {result}")
        
        with col2:
            if st.button("DFS"):
                result = graph.dfs(start_node)
                st.success(f"DFS: {result}")
        
        # Visualiza√ß√£o
        st.markdown("#### üåê Visualiza√ß√£o do Grafo")
        
        try:
            import networkx as nx
            
            G = nx.Graph()
            for node in graph.graph.keys():
                G.add_node(node)
            
            for node, neighbors in graph.graph.items():
                for neighbor in neighbors:
                    G.add_edge(node, neighbor)
            
            # Plotar
            fig, ax = plt.subplots(figsize=(10, 8))
            pos = nx.spring_layout(G)
            nx.draw(G, pos, with_labels=True, node_color='lightblue', 
                   node_size=1500, font_size=12, font_weight='bold', ax=ax)
            ax.set_title("Grafo - Visualiza√ß√£o")
            st.pyplot(fig)
            
        except ImportError:
            st.info("NetworkX n√£o dispon√≠vel. Mostrando adjac√™ncias:")
            for node, neighbors in graph.graph.items():
                st.write(f"**{node}**: {neighbors}")
        
        # M√©tricas
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("N√≥s", len(graph.graph))
        with col2:
            total_edges = sum(len(neighbors) for neighbors in graph.graph.values()) // 2
            st.metric("Arestas", total_edges)
        with col3:
            st.markdown('<span class="complexity-badge">O(V + E)</span>', unsafe_allow_html=True)
            
    except Exception as e:
        st.error(f"Erro no Graph: {e}")

def render_module_3():
    """Renderiza o m√≥dulo 3 - Programa√ß√£o Din√¢mica."""
    st.markdown("## üéØ M√≥dulo 3: Programa√ß√£o Din√¢mica")
    
    try:
        from modulo_3_programacao_dinamica.metodologia_3_passos import Metodologia3Passos
        
        # Inicializar metodologia
        if 'metodologia' not in st.session_state:
            st.session_state.metodologia = Metodologia3Passos()
        
        metodologia = st.session_state.metodologia
        
        # Sele√ß√£o de problema
        problema = st.selectbox(
            "Escolha o Problema",
            [
                "üî¢ Fibonacci",
                "üéí Knapsack (0/1)",
                "üìù Longest Common Subsequence",
                "ü™ô Coin Change"
            ]
        )
        
        if problema == "üî¢ Fibonacci":
            render_fibonacci_problem()
        elif problema == "üéí Knapsack (0/1)":
            render_knapsack_problem()
        elif problema == "üìù Longest Common Subsequence":
            render_lcs_problem()
        elif problema == "ü™ô Coin Change":
            render_coin_change_problem()
            
    except ImportError as e:
        st.error(f"Erro ao importar m√≥dulo 3: {e}")
        st.info("Certifique-se de que todos os arquivos do m√≥dulo 3 est√£o presentes.")

def render_fibonacci_problem():
    """Renderiza o problema de Fibonacci."""
    st.markdown("### üî¢ Fibonacci - Metodologia 3 Passos")
    
    try:
        from modulo_3_programacao_dinamica.metodologia_3_passos import Metodologia3Passos
        
        metodologia = Metodologia3Passos()
        
        # Controles
        n = st.slider("Valor de n", 0, 20, 10)
        
        # Abordagem
        abordagem = st.radio(
            "Escolha a Abordagem",
            ["üí™ For√ßa Bruta", "üß† Memoiza√ß√£o", "üìä Tabula√ß√£o"]
        )
        
        # Executar
        if st.button("Calcular Fibonacci"):
            if abordagem == "üí™ For√ßa Bruta":
                resultado = metodologia.fibonacci_forca_bruta(n)
                st.success(f"Fibonacci({n}) = {resultado}")
                st.markdown(f'<span class="error-badge">O(2^n)</span>', unsafe_allow_html=True)
                
            elif abordagem == "üß† Memoiza√ß√£o":
                resultado = metodologia.fibonacci_memoizacao(n)
                st.success(f"Fibonacci({n}) = {resultado}")
                st.markdown(f'<span class="warning-badge">O(n)</span>', unsafe_allow_html=True)
                
            elif abordagem == "üìä Tabula√ß√£o":
                resultado = metodologia.fibonacci_tabulacao(n)
                st.success(f"Fibonacci({n}) = {resultado}")
                st.markdown(f'<span class="complexity-badge">O(n)</span>', unsafe_allow_html=True)
        
        # Explica√ß√£o da metodologia
        st.markdown("#### üìö Metodologia 3 Passos")
        
        st.markdown("""
        <div class="algorithm-step">
            <strong>Passo 1: For√ßa Bruta</strong><br>
            Implementa√ß√£o recursiva direta sem otimiza√ß√£o.<br>
            Complexidade: O(2^n) - Exponencial
        </div>
        """, unsafe_allow_html=True)
        
        st.markdown("""
        <div class="algorithm-step">
            <strong>Passo 2: Memoiza√ß√£o</strong><br>
            Adiciona cache para evitar recalcular subproblemas.<br>
            Complexidade: O(n) - Linear
        </div>
        """, unsafe_allow_html=True)
        
        st.markdown("""
        <div class="algorithm-step">
            <strong>Passo 3: Tabula√ß√£o</strong><br>
            Abordagem bottom-up com tabela DP.<br>
            Complexidade: O(n) - Linear, O(1) espa√ßo
        </div>
        """, unsafe_allow_html=True)
        
        # Visualiza√ß√£o da sequ√™ncia
        if n > 0:
            st.markdown("#### üìä Sequ√™ncia de Fibonacci")
            fib_sequence = []
            a, b = 0, 1
            fib_sequence.append(a)
            if n > 0:
                fib_sequence.append(b)
            
            for i in range(2, n + 1):
                c = a + b
                fib_sequence.append(c)
                a, b = b, c
            
            # Gr√°fico
            fig, ax = plt.subplots(figsize=(12, 6))
            ax.plot(range(n + 1), fib_sequence, 'bo-', linewidth=2, markersize=8)
            ax.set_title(f"Sequ√™ncia de Fibonacci at√© F({n})")
            ax.set_xlabel("n")
            ax.set_ylabel("Fibonacci(n)")
            ax.grid(True, alpha=0.3)
            
            st.pyplot(fig)
            
    except Exception as e:
        st.error(f"Erro no Fibonacci: {e}")

def render_knapsack_problem():
    """Renderiza o problema da Knapsack."""
    st.markdown("### üéí Knapsack (0/1) - Metodologia 3 Passos")
    
    try:
        from modulo_3_programacao_dinamica.metodologia_3_passos import Metodologia3Passos
        
        metodologia = Metodologia3Passos()
        
        # Controles
        st.markdown("#### üéÆ Configura√ß√£o")
        
        col1, col2 = st.columns(2)
        
        with col1:
            capacity = st.slider("Capacidade da Mochila", 1, 20, 10)
            
        with col2:
            num_items = st.slider("N√∫mero de Itens", 1, 10, 5)
        
        # Gerar itens aleat√≥rios ou usar valores padr√£o
        if st.button("Gerar Itens Aleat√≥rios"):
            weights = np.random.randint(1, 8, num_items).tolist()
            values = np.random.randint(1, 15, num_items).tolist()
            st.session_state.knapsack_weights = weights
            st.session_state.knapsack_values = values
        
        # Usar valores padr√£o se n√£o existirem
        if 'knapsack_weights' not in st.session_state:
            st.session_state.knapsack_weights = [2, 3, 4, 5, 6]
            st.session_state.knapsack_values = [3, 4, 5, 6, 7]
        
        weights = st.session_state.knapsack_weights[:num_items]
        values = st.session_state.knapsack_values[:num_items]
        
        # Mostrar itens
        st.markdown("#### üì¶ Itens Dispon√≠veis")
        items_df = {
            'Item': [f'Item {i+1}' for i in range(len(weights))],
            'Peso': weights,
            'Valor': values,
            'Valor/Peso': [round(v/w, 2) for v, w in zip(values, weights)]
        }
        st.dataframe(items_df, use_container_width=True)
        
        # Abordagem
        abordagem = st.radio(
            "Escolha a Abordagem",
            ["üí™ For√ßa Bruta", "üß† Memoiza√ß√£o", "üìä Tabula√ß√£o"]
        )
        
        # Executar
        if st.button("Resolver Knapsack"):
            if abordagem == "üí™ For√ßa Bruta":
                resultado = metodologia.knapsack_forca_bruta(weights, values, capacity)
                st.success(f"Valor m√°ximo: {resultado}")
                st.markdown(f'<span class="error-badge">O(2^n)</span>', unsafe_allow_html=True)
                
            elif abordagem == "üß† Memoiza√ß√£o":
                resultado = metodologia.knapsack_memoizacao(weights, values, capacity)
                st.success(f"Valor m√°ximo: {resultado}")
                st.markdown(f'<span class="warning-badge">O(n*W)</span>', unsafe_allow_html=True)
                
            elif abordagem == "üìä Tabula√ß√£o":
                resultado = metodologia.knapsack_tabulacao(weights, values, capacity)
                st.success(f"Valor m√°ximo: {resultado}")
                st.markdown(f'<span class="complexity-badge">O(n*W)</span>', unsafe_allow_html=True)
        
        # Visualiza√ß√£o
        st.markdown("#### üìä Visualiza√ß√£o dos Itens")
        
        fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 6))
        
        # Gr√°fico de pesos vs valores
        ax1.scatter(weights, values, s=100, alpha=0.7, c='blue')
        for i, (w, v) in enumerate(zip(weights, values)):
            ax1.annotate(f'Item {i+1}', (w, v), xytext=(5, 5), 
                        textcoords='offset points', fontsize=8)
        ax1.set_xlabel('Peso')
        ax1.set_ylabel('Valor')
        ax1.set_title('Peso vs Valor dos Itens')
        ax1.grid(True, alpha=0.3)
        
        # Gr√°fico de barras - efici√™ncia
        efficiency = [v/w for v, w in zip(values, weights)]
        bars = ax2.bar(range(len(weights)), efficiency, alpha=0.7, color='green')
        ax2.set_xlabel('Itens')
        ax2.set_ylabel('Valor/Peso')
        ax2.set_title('Efici√™ncia dos Itens')
        ax2.set_xticks(range(len(weights)))
        ax2.set_xticklabels([f'Item {i+1}' for i in range(len(weights))])
        
        st.pyplot(fig)
        
    except Exception as e:
        st.error(f"Erro no Knapsack: {e}")

def render_lcs_problem():
    """Renderiza o problema de Longest Common Subsequence."""
    st.markdown("### üìù Longest Common Subsequence - Metodologia 3 Passos")
    
    try:
        from modulo_3_programacao_dinamica.metodologia_3_passos import Metodologia3Passos
        
        metodologia = Metodologia3Passos()
        
        # Controles
        col1, col2 = st.columns(2)
        
        with col1:
            str1 = st.text_input("String 1", value="ABCDGH")
            
        with col2:
            str2 = st.text_input("String 2", value="AEDFHR")
        
        # Abordagem
        abordagem = st.radio(
            "Escolha a Abordagem",
            ["üí™ For√ßa Bruta", "üß† Memoiza√ß√£o", "üìä Tabula√ß√£o"]
        )
        
        # Executar
        if st.button("Calcular LCS"):
            if abordagem == "üí™ For√ßa Bruta":
                resultado = metodologia.lcs_forca_bruta(str1, str2)
                st.success(f"Comprimento da LCS: {resultado}")
                st.markdown(f'<span class="error-badge">O(2^n)</span>', unsafe_allow_html=True)
                
            elif abordagem == "üß† Memoiza√ß√£o":
                resultado = metodologia.lcs_memoizacao(str1, str2)
                st.success(f"Comprimento da LCS: {resultado}")
                st.markdown(f'<span class="warning-badge">O(m*n)</span>', unsafe_allow_html=True)
                
            elif abordagem == "üìä Tabula√ß√£o":
                resultado = metodologia.lcs_tabulacao(str1, str2)
                st.success(f"Comprimento da LCS: {resultado}")
                st.markdown(f'<span class="complexity-badge">O(m*n)</span>', unsafe_allow_html=True)
        
        # Visualiza√ß√£o das strings
        st.markdown("#### üî§ Compara√ß√£o das Strings")
        
        if str1 and str2:
            # Mostrar caracteres
            st.markdown("**String 1:**")
            cols1 = st.columns(len(str1))
            for i, char in enumerate(str1):
                with cols1[i]:
                    st.markdown(f"**{char}**")
            
            st.markdown("**String 2:**")
            cols2 = st.columns(len(str2))
            for i, char in enumerate(str2):
                with cols2[i]:
                    st.markdown(f"**{char}**")
            
            # Encontrar caracteres comuns
            common_chars = set(str1) & set(str2)
            st.markdown(f"**Caracteres em comum:** {sorted(common_chars)}")
        
        # Explica√ß√£o
        st.markdown("#### üí° Conceito")
        st.markdown("""
        <div class="algorithm-step">
            <strong>Longest Common Subsequence (LCS)</strong><br>
            Encontra a maior subsequ√™ncia comum entre duas strings.<br>
            Exemplo: "ABCDGH" e "AEDFHR" ‚Üí LCS = "ADH" (comprimento 3)
        </div>
        """, unsafe_allow_html=True)
        
    except Exception as e:
        st.error(f"Erro no LCS: {e}")

def render_coin_change_problem():
    """Renderiza o problema de Coin Change."""
    st.markdown("### ü™ô Coin Change - Metodologia 3 Passos")
    
    try:
        from modulo_3_programacao_dinamica.metodologia_3_passos import Metodologia3Passos
        
        metodologia = Metodologia3Passos()
        
        # Controles
        col1, col2 = st.columns(2)
        
        with col1:
            amount = st.number_input("Quantidade", min_value=1, max_value=100, value=11)
            
        with col2:
            coins_input = st.text_input("Moedas (separadas por v√≠rgula)", value="1,2,5")
            
        try:
            coins = [int(x.strip()) for x in coins_input.split(",")]
        except:
            coins = [1, 2, 5]
        
        st.write(f"**Moedas dispon√≠veis:** {coins}")
        st.write(f"**Quantidade alvo:** {amount}")
        
        # Abordagem
        abordagem = st.radio(
            "Escolha a Abordagem",
            ["üí™ For√ßa Bruta", "üß† Memoiza√ß√£o", "üìä Tabula√ß√£o"]
        )
        
        # Executar
        if st.button("Calcular Coin Change"):
            if abordagem == "üí™ For√ßa Bruta":
                resultado = metodologia.coin_change_forca_bruta(coins, amount)
                if resultado == float('inf'):
                    st.error("N√£o √© poss√≠vel formar a quantidade com as moedas dispon√≠veis")
                else:
                    st.success(f"N√∫mero m√≠nimo de moedas: {resultado}")
                st.markdown(f'<span class="error-badge">O(2^n)</span>', unsafe_allow_html=True)
                
            elif abordagem == "üß† Memoiza√ß√£o":
                resultado = metodologia.coin_change_memoizacao(coins, amount)
                if resultado == float('inf'):
                    st.error("N√£o √© poss√≠vel formar a quantidade com as moedas dispon√≠veis")
                else:
                    st.success(f"N√∫mero m√≠nimo de moedas: {resultado}")
                st.markdown(f'<span class="warning-badge">O(n*amount)</span>', unsafe_allow_html=True)
                
            elif abordagem == "üìä Tabula√ß√£o":
                resultado = metodologia.coin_change_tabulacao(coins, amount)
                if resultado == float('inf'):
                    st.error("N√£o √© poss√≠vel formar a quantidade com as moedas dispon√≠veis")
                else:
                    st.success(f"N√∫mero m√≠nimo de moedas: {resultado}")
                st.markdown(f'<span class="complexity-badge">O(n*amount)</span>', unsafe_allow_html=True)
        
        # Visualiza√ß√£o
        st.markdown("#### ü™ô Visualiza√ß√£o das Moedas")
        
        fig, ax = plt.subplots(figsize=(10, 6))
        
        # Mostrar moedas como barras
        bars = ax.bar(range(len(coins)), coins, alpha=0.7, color='gold')
        ax.set_xlabel('Tipo de Moeda')
        ax.set_ylabel('Valor')
        ax.set_title('Moedas Dispon√≠veis')
        ax.set_xticks(range(len(coins)))
        ax.set_xticklabels([f'Moeda {i+1}' for i in range(len(coins))])
        
        # Adicionar valores nas barras
        for bar, coin in zip(bars, coins):
            height = bar.get_height()
            ax.text(bar.get_x() + bar.get_width()/2., height,
                   f'{coin}', ha='center', va='bottom', fontweight='bold')
        
        st.pyplot(fig)
        
        # Explica√ß√£o
        st.markdown("#### üí° Conceito")
        st.markdown("""
        <div class="algorithm-step">
            <strong>Coin Change Problem</strong><br>
            Encontra o n√∫mero m√≠nimo de moedas necess√°rias para formar uma quantia.<br>
            Exemplo: Para 11 com moedas [1,2,5] ‚Üí 3 moedas (5+5+1)
        </div>
        """, unsafe_allow_html=True)
        
    except Exception as e:
        st.error(f"Erro no Coin Change: {e}")

def render_module_4():
    """Renderiza o m√≥dulo 4 - Entrevistas."""
    st.markdown("## üíº M√≥dulo 4: Entrevistas")
    
    try:
        from modulo_4_entrevistas.problem_playground import InterviewSession
        
        # Inicializar sess√£o de entrevista
        if 'interview_session' not in st.session_state:
            st.session_state.interview_session = InterviewSession()
        
        session = st.session_state.interview_session
        
        # Sele√ß√£o de modo
        mode = st.selectbox(
            "Escolha o Modo",
            [
                "üéØ Simula√ß√£o de Entrevista",
                "üìö Biblioteca de Problemas",
                "üìä An√°lise de C√≥digo",
                "‚è±Ô∏è Pr√°tica com Tempo"
            ]
        )
        
        if mode == "üéØ Simula√ß√£o de Entrevista":
            render_interview_simulation()
        elif mode == "üìö Biblioteca de Problemas":
            render_problem_library()
        elif mode == "üìä An√°lise de C√≥digo":
            render_code_analysis()
        elif mode == "‚è±Ô∏è Pr√°tica com Tempo":
            render_timed_practice()
            
    except ImportError as e:
        st.error(f"Erro ao importar m√≥dulo 4: {e}")
        st.info("Certifique-se de que todos os arquivos do m√≥dulo 4 est√£o presentes.")

def render_interview_simulation():
    """Renderiza a simula√ß√£o de entrevista."""
    st.markdown("### üéØ Simula√ß√£o de Entrevista")
    
    try:
        from modulo_4_entrevistas.problem_playground import InterviewSession
        
        session = st.session_state.interview_session
        
        # Configura√ß√µes da entrevista
        st.markdown("#### ‚öôÔ∏è Configura√ß√µes")
        
        col1, col2 = st.columns(2)
        
        with col1:
            difficulty = st.selectbox("Dificuldade", ["Easy", "Medium", "Hard"])
            category = st.selectbox("Categoria", ["Array", "String", "Tree", "Graph", "Dynamic Programming"])
            
        with col2:
            time_limit = st.slider("Tempo Limite (minutos)", 15, 60, 30)
            show_hints = st.checkbox("Mostrar Dicas", value=True)
        
        # Iniciar entrevista
        if st.button("üöÄ Iniciar Nova Entrevista"):
            problem = session.get_random_problem(difficulty, category)
            st.session_state.current_problem = problem
            st.session_state.interview_start_time = time.time()
            st.session_state.interview_active = True
            st.success("Entrevista iniciada!")
        
        # Mostrar problema atual
        if hasattr(st.session_state, 'current_problem') and st.session_state.current_problem:
            problem = st.session_state.current_problem
            
            st.markdown("#### üìã Problema Atual")
            st.markdown(f"""
            <div class="algorithm-step">
                <strong>{problem['title']}</strong><br>
                <strong>Dificuldade:</strong> {problem['difficulty']}<br>
                <strong>Categoria:</strong> {problem['category']}<br><br>
                {problem['description']}
            </div>
            """, unsafe_allow_html=True)
            
            # Exemplos
            if 'examples' in problem:
                st.markdown("#### üí° Exemplos")
                for i, example in enumerate(problem['examples']):
                    st.markdown(f"""
                    <div class="metric-card">
                        <strong>Exemplo {i+1}:</strong><br>
                        <strong>Input:</strong> {example['input']}<br>
                        <strong>Output:</strong> {example['output']}<br>
                        <strong>Explica√ß√£o:</strong> {example.get('explanation', 'N/A')}
                    </div>
                    """, unsafe_allow_html=True)
            
            # Editor de c√≥digo
            st.markdown("#### üíª Sua Solu√ß√£o")
            code = st.text_area("Escreva seu c√≥digo aqui:", height=300, 
                              value=problem.get('template', '# Escreva sua solu√ß√£o aqui'))
            
            # Bot√µes de a√ß√£o
            col1, col2, col3 = st.columns(3)
            
            with col1:
                if st.button("üß™ Testar C√≥digo"):
                    # Aqui voc√™ pode adicionar l√≥gica de teste
                    st.info("Testando c√≥digo...")
                    
            with col2:
                if st.button("üí° Dica"):
                    if show_hints and 'hints' in problem:
                        hint = problem['hints'][0] if problem['hints'] else "Nenhuma dica dispon√≠vel"
                        st.success(f"üí° {hint}")
                    else:
                        st.info("Dicas desabilitadas")
                        
            with col3:
                if st.button("‚úÖ Submeter"):
                    # An√°lise do c√≥digo
                    analysis = session.analyze_code(code)
                    st.success("C√≥digo submetido!")
                    
                    # Mostrar an√°lise
                    st.markdown("#### üìä An√°lise da Solu√ß√£o")
                    
                    col1, col2, col3 = st.columns(3)
                    with col1:
                        st.metric("Complexidade", analysis.get('complexity', 'N/A'))
                    with col2:
                        st.metric("Estilo", analysis.get('style_score', 'N/A'))
                    with col3:
                        st.metric("Corretude", analysis.get('correctness', 'N/A'))
                    
                    # Feedback
                    if 'feedback' in analysis:
                        st.markdown(f"""
                        <div class="algorithm-step">
                            <strong>Feedback:</strong><br>
                            {analysis['feedback']}
                        </div>
                        """, unsafe_allow_html=True)
        
        # Timer
        if hasattr(st.session_state, 'interview_active') and st.session_state.interview_active:
            elapsed = time.time() - st.session_state.interview_start_time
            remaining = max(0, time_limit * 60 - elapsed)
            
            col1, col2 = st.columns(2)
            with col1:
                st.metric("Tempo Decorrido", f"{int(elapsed // 60)}:{int(elapsed % 60):02d}")
            with col2:
                st.metric("Tempo Restante", f"{int(remaining // 60)}:{int(remaining % 60):02d}")
                
            if remaining <= 0:
                st.error("‚è∞ Tempo esgotado!")
                st.session_state.interview_active = False
                
    except Exception as e:
        st.error(f"Erro na simula√ß√£o: {e}")

def render_problem_library():
    """Renderiza a biblioteca de problemas."""
    st.markdown("### üìö Biblioteca de Problemas")
    
    # Problemas exemplo
    problems = [
        {
            "title": "Two Sum",
            "difficulty": "Easy",
            "category": "Array",
            "description": "Encontre dois n√∫meros em um array que somem um valor alvo.",
            "examples": [
                {"input": "[2,7,11,15], target=9", "output": "[0,1]", "explanation": "nums[0] + nums[1] = 2 + 7 = 9"}
            ]
        },
        {
            "title": "Reverse Linked List",
            "difficulty": "Easy",
            "category": "Linked List",
            "description": "Inverta uma lista ligada.",
            "examples": [
                {"input": "1->2->3->4->5", "output": "5->4->3->2->1", "explanation": "Inverter a ordem dos n√≥s"}
            ]
        },
        {
            "title": "Maximum Subarray",
            "difficulty": "Medium",
            "category": "Array",
            "description": "Encontre o subarray cont√≠guo com a maior soma.",
            "examples": [
                {"input": "[-2,1,-3,4,-1,2,1,-5,4]", "output": "6", "explanation": "Subarray [4,-1,2,1] tem soma 6"}
            ]
        },
        {
            "title": "Climbing Stairs",
            "difficulty": "Easy",
            "category": "Dynamic Programming",
            "description": "Quantas maneiras distintas existem para subir n degraus?",
            "examples": [
                {"input": "n=3", "output": "3", "explanation": "1+1+1, 1+2, 2+1"}
            ]
        }
    ]
    
    # Filtros
    col1, col2 = st.columns(2)
    
    with col1:
        filter_difficulty = st.selectbox("Filtrar por Dificuldade", ["Todas", "Easy", "Medium", "Hard"])
        
    with col2:
        filter_category = st.selectbox("Filtrar por Categoria", 
                                     ["Todas", "Array", "String", "Linked List", "Tree", "Dynamic Programming"])
    
    # Aplicar filtros
    filtered_problems = problems
    if filter_difficulty != "Todas":
        filtered_problems = [p for p in filtered_problems if p['difficulty'] == filter_difficulty]
    if filter_category != "Todas":
        filtered_problems = [p for p in filtered_problems if p['category'] == filter_category]
    
    # Mostrar problemas
    st.markdown("#### üìã Problemas Dispon√≠veis")
    
    for i, problem in enumerate(filtered_problems):
        with st.expander(f"{problem['title']} ({problem['difficulty']})"):
            st.markdown(f"""
            <div class="algorithm-step">
                <strong>Categoria:</strong> {problem['category']}<br>
                <strong>Descri√ß√£o:</strong> {problem['description']}
            </div>
            """, unsafe_allow_html=True)
            
            # Exemplos
            if 'examples' in problem:
                st.markdown("**Exemplos:**")
                for j, example in enumerate(problem['examples']):
                    st.markdown(f"""
                    - **Input:** {example['input']}
                    - **Output:** {example['output']}
                    - **Explica√ß√£o:** {example.get('explanation', 'N/A')}
                    """)
            
            if st.button(f"Resolver {problem['title']}", key=f"solve_{i}"):
                st.session_state.current_problem = problem
                st.success(f"Problema '{problem['title']}' selecionado!")
    
    # Estat√≠sticas
    st.markdown("#### üìä Estat√≠sticas")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric("Total de Problemas", len(problems))
        
    with col2:
        easy_count = len([p for p in problems if p['difficulty'] == 'Easy'])
        st.metric("Problemas Easy", easy_count)
        
    with col3:
        medium_count = len([p for p in problems if p['difficulty'] == 'Medium'])
        st.metric("Problemas Medium", medium_count)

def render_code_analysis():
    """Renderiza a an√°lise de c√≥digo."""
    st.markdown("### üìä An√°lise de C√≥digo")
    
    st.markdown("#### üíª Cole seu c√≥digo para an√°lise")
    
    # Editor de c√≥digo
    code = st.text_area("C√≥digo:", height=300, 
                       value="""def two_sum(nums, target):
    for i in range(len(nums)):
        for j in range(i + 1, len(nums)):
            if nums[i] + nums[j] == target:
                return [i, j]
    return []""")
    
    # An√°lise
    if st.button("üîç Analisar C√≥digo"):
        try:
            from modulo_4_entrevistas.problem_playground import InterviewSession
            
            session = InterviewSession()
            analysis = session.analyze_code(code)
            
            st.markdown("#### üìà Resultados da An√°lise")
            
            # M√©tricas
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                complexity = analysis.get('time_complexity', 'N/A')
                st.metric("Complexidade Temporal", complexity)
                
            with col2:
                space_complexity = analysis.get('space_complexity', 'N/A')
                st.metric("Complexidade Espacial", space_complexity)
                
            with col3:
                style_score = analysis.get('style_score', 'N/A')
                st.metric("Pontua√ß√£o de Estilo", f"{style_score}/10" if isinstance(style_score, (int, float)) else style_score)
                
            with col4:
                correctness = analysis.get('correctness', 'N/A')
                st.metric("Corretude", correctness)
            
            # Feedback detalhado
            if 'feedback' in analysis:
                st.markdown("#### üí¨ Feedback Detalhado")
                st.markdown(f"""
                <div class="algorithm-step">
                    {analysis['feedback']}
                </div>
                """, unsafe_allow_html=True)
            
            # Sugest√µes de melhoria
            if 'suggestions' in analysis:
                st.markdown("#### üí° Sugest√µes de Melhoria")
                for suggestion in analysis['suggestions']:
                    st.markdown(f"""
                    <div class="metric-card">
                        {suggestion}
                    </div>
                    """, unsafe_allow_html=True)
            
            # Compara√ß√£o com solu√ß√£o otimizada
            if 'optimized_solution' in analysis:
                st.markdown("#### ‚ö° Solu√ß√£o Otimizada")
                st.code(analysis['optimized_solution'], language='python')
                
        except Exception as e:
            st.error(f"Erro na an√°lise: {e}")
            
            # An√°lise b√°sica manual
            st.markdown("#### üìä An√°lise B√°sica")
            
            lines = code.split('\n')
            has_nested_loops = any('for' in line and any('for' in other for other in lines[i+1:]) for i, line in enumerate(lines))
            
            if has_nested_loops:
                st.markdown('<span class="error-badge">O(n¬≤) - Complexidade alta detectada</span>', unsafe_allow_html=True)
            else:
                st.markdown('<span class="complexity-badge">O(n) ou melhor</span>', unsafe_allow_html=True)
            
            st.info("An√°lise detalhada indispon√≠vel. Verifique se o m√≥dulo 4 est√° instalado corretamente.")

def render_timed_practice():
    """Renderiza a pr√°tica com tempo."""
    st.markdown("### ‚è±Ô∏è Pr√°tica com Tempo")
    
    # Configura√ß√µes
    col1, col2 = st.columns(2)
    
    with col1:
        practice_time = st.slider("Tempo de Pr√°tica (minutos)", 5, 30, 15)
        
    with col2:
        problem_type = st.selectbox("Tipo de Problema", ["F√°cil", "M√©dio", "Dif√≠cil", "Misto"])
    
    # Iniciar pr√°tica
    if st.button("üèÉ Iniciar Pr√°tica"):
        st.session_state.practice_start_time = time.time()
        st.session_state.practice_active = True
        st.session_state.practice_duration = practice_time * 60
        st.success("Pr√°tica iniciada!")
    
    # Timer e progresso
    if hasattr(st.session_state, 'practice_active') and st.session_state.practice_active:
        elapsed = time.time() - st.session_state.practice_start_time
        remaining = max(0, st.session_state.practice_duration - elapsed)
        
        # Barra de progresso
        progress = min(1.0, elapsed / st.session_state.practice_duration)
        st.progress(progress)
        
        col1, col2 = st.columns(2)
        with col1:
            st.metric("Tempo Decorrido", f"{int(elapsed // 60)}:{int(elapsed % 60):02d}")
        with col2:
            st.metric("Tempo Restante", f"{int(remaining // 60)}:{int(remaining % 60):02d}")
        
        if remaining <= 0:
            st.success("üèÅ Pr√°tica finalizada!")
            st.session_state.practice_active = False
            st.balloons()
    
    # Estat√≠sticas de pr√°tica
    st.markdown("#### üìä Estat√≠sticas de Pr√°tica")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric("Problemas Resolvidos", st.session_state.get('problems_solved', 0))
        
    with col2:
        st.metric("Tempo M√©dio", f"{st.session_state.get('avg_time', 0):.1f} min")
        
    with col3:
        st.metric("Taxa de Acerto", f"{st.session_state.get('success_rate', 0):.1f}%")
    
    # Dicas para pr√°tica
    st.markdown("#### üí° Dicas para Pr√°tica Eficiente")
    
    tips = [
        "Comece com problemas mais f√°ceis para ganhar confian√ßa",
        "Pratique algoritmos fundamentais regularmente",
        "Analise solu√ß√µes de outras pessoas ap√≥s resolver",
        "Mantenha um tempo limite para cada problema",
        "Foque na clareza do c√≥digo, n√£o apenas na solu√ß√£o"
    ]
    
    for tip in tips:
        st.markdown(f"""
        <div class="metric-card">
            üí° {tip}
        </div>
        """, unsafe_allow_html=True)

if __name__ == "__main__":
    main()
