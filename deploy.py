#!/usr/bin/env python3
"""
üöÄ Script de Deploy Autom√°tico - Algoritmos Visualizador
======================================================

Este script automatiza o processo de deploy no Streamlit Cloud.

Uso: python deploy.py
"""

import os
import sys
import subprocess
import webbrowser
from pathlib import Path


def executar_comando(comando, descricao):
    """Executa um comando e mostra o resultado."""
    print(f"\nüîß {descricao}...")
    try:
        resultado = subprocess.run(comando, shell=True, capture_output=True, text=True, check=True)
        print(f"‚úÖ {descricao} - Sucesso!")
        if resultado.stdout:
            print(resultado.stdout)
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå {descricao} - Falhou!")
        print(f"Erro: {e}")
        if e.stdout:
            print(f"Sa√≠da: {e.stdout}")
        if e.stderr:
            print(f"Erro detalhado: {e.stderr}")
        return False


def verificar_prerequisitos():
    """Verifica se todos os pr√©-requisitos est√£o atendidos."""
    print("üìã Verificando pr√©-requisitos...")

    # Verificar se estamos em um reposit√≥rio git
    if not os.path.exists(".git"):
        print("‚ùå N√£o est√° em um reposit√≥rio Git!")
        return False

    # Verificar arquivos obrigat√≥rios
    arquivos_obrigatorios = ["app_integrada.py", "requirements.txt", ".streamlit/config.toml"]

    for arquivo in arquivos_obrigatorios:
        if not os.path.exists(arquivo):
            print(f"‚ùå Arquivo obrigat√≥rio faltando: {arquivo}")
            return False

    print("‚úÖ Todos os pr√©-requisitos atendidos!")
    return True


def fazer_deploy():
    """Executa o processo completo de deploy."""
    print("üöÄ INICIANDO DEPLOY - ALGORITMOS VISUALIZADOR")
    print("=" * 50)

    # Verificar pr√©-requisitos
    if not verificar_prerequisitos():
        print("\n‚ùå Pr√©-requisitos n√£o atendidos. Abortando deploy.")
        return False

    # Verificar status do git
    if not executar_comando("git status --porcelain", "Verificando status do Git"):
        return False

    # Fazer commit se necess√°rio
    status = subprocess.run("git status --porcelain", shell=True, capture_output=True, text=True)
    if status.stdout.strip():
        print("\nüìù H√° mudan√ßas n√£o commitadas. Fazendo commit...")
        if not executar_comando("git add .", "Adicionando arquivos"):
            return False
        if not executar_comando('git commit -m "üöÄ Deploy autom√°tico"', "Fazendo commit"):
            return False

    # Fazer push
    if not executar_comando("git push origin main", "Fazendo push para GitHub"):
        return False

    print("\nüéâ DEPLOY CONCLU√çDO COM SUCESSO!")
    print("\nüìã PR√ìXIMOS PASSOS:")
    print("1. Acesse: https://share.streamlit.io")
    print("2. Conecte sua conta GitHub")
    print("3. Selecione o reposit√≥rio: algoritmos-visualizador")
    print("4. Configure:")
    print("   - Main file path: app_integrada.py")
    print("   - Python version: 3.9+")
    print("5. Configure as secrets no painel do Streamlit Cloud:")
    print("   - TAVILY_API_KEY")
    print("   - GITHUB_TOKEN")
    print("   - OPENAI_API_KEY (opcional)")
    print("   - ANTHROPIC_API_KEY (opcional)")

    # Abrir navegador
    try:
        webbrowser.open("https://share.streamlit.io")
        print("\nüåê Abrindo Streamlit Cloud no navegador...")
    except:
        print("\nüåê Acesse manualmente: https://share.streamlit.io")

    return True


if __name__ == "__main__":
    sucesso = fazer_deploy()
    sys.exit(0 if sucesso else 1)
