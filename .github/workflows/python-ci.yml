name: Python CI - Algoritmos Visualizador

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements_mcp.txt
        pip install flake8 black pytest # Ferramentas de qualidade e testes

    - name: Lint with Flake8 (Critical Errors Only)
      run: |
        # Verifica√ß√£o apenas de erros cr√≠ticos que devem falhar o build
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --exclude=__pycache__,venv,.git

    - name: Lint with Flake8 (Quality Check)
      continue-on-error: true
      run: |
        # Verifica√ß√£o de qualidade geral (n√£o falha o build)
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics --exclude=__pycache__,venv,.git

    - name: Check formatting with Black
      continue-on-error: true
      run: |
        black --check --diff . --exclude="/(venv|__pycache__|\.git)/"

    - name: Run Tests
      run: |
        python -m pytest test_projeto.py -v
        echo '‚úÖ Todos os testes passaram!'

    - name: Test Module 1 Applications
      run: |
        cd modulo_1_fundamentos
        python -c "
        from aplicacoes_reais import *
        from casos_uso_praticos import *
        print('‚úÖ M√≥dulo 1 - Imports funcionando')
        
        # Teste b√°sico do sistema de logs
        sistema = SistemaBuscaLogs()
        sistema.adicionar_log(1000, 'INFO', 'Teste')
        resultado = sistema.buscar_logs_periodo(500, 1500)
        assert len(resultado) == 1
        print('‚úÖ Sistema de Logs funcionando')
        
        # Teste b√°sico do detector de fraudes
        detector = DetectorFraudes()
        detector.adicionar_transacao(1000, 100, 'DEPOSITO', 'conta1')
        print('‚úÖ Detector de Fraudes funcionando')
        
        # Teste b√°sico da rede social
        rede = RedeSocial()
        rede.adicionar_amizade('A', 'B')
        grau = rede.grau_separacao('A', 'B')
        assert grau == 1
        print('‚úÖ Rede Social funcionando')
        
        print('üéä Todos os testes do M√≥dulo 1 passaram!')
        "

    - name: Test Streamlit App Import
      run: |
        python -c "
        try:
            import streamlit_app_mcp
            print('‚úÖ Streamlit App importado com sucesso')
        except ImportError as e:
            print(f'‚ö†Ô∏è Erro na importa√ß√£o: {e}')
            # N√£o falha o build por conta de depend√™ncias opcionais
        "

    - name: Validate Requirements Files
      run: |
        echo '‚úÖ Validando arquivos de requirements...'
        pip install -r requirements_simple.txt
        pip install -r requirements_visualizacao.txt
        echo '‚úÖ Todos os requirements s√£o v√°lidos'
