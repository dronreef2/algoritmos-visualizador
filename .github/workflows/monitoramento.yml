name: Monitoramento Inteligente

on:
  schedule:
    # Executa a cada 6 horas para monitoramento frequente
    - cron: '0 */6 * * *'
  workflow_dispatch: # Permite execu√ß√£o manual
  push:
    branches: [ main ]
    paths:
      - '.github/workflows/monitoramento.yml'

jobs:
  health-check:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests pandas plotly

    - name: Advanced Health Check
      run: |
        echo "üîç Executando verifica√ß√£o avan√ßada de sa√∫de..."
        python -c "
        import requests
        import time
        import json
        from datetime import datetime

        app_url = 'https://algoritmos-visualizador.streamlit.app'

        # Health check b√°sico
        try:
            start = time.time()
            response = requests.get(app_url, timeout=30)
            response_time = time.time() - start

            health_data = {
                'timestamp': datetime.now().isoformat(),
                'status_code': response.status_code,
                'response_time': round(response_time, 2),
                'is_up': response.status_code == 200
            }

            print(f'‚úÖ Health Check: HTTP {response.status_code} - {response_time:.2f}s')

        except Exception as e:
            health_data = {
                'timestamp': datetime.now().isoformat(),
                'status_code': None,
                'response_time': None,
                'is_up': False,
                'error': str(e)
            }
            print(f'‚ùå Health Check falhou: {e}')

        # Salva resultado
        with open('health_check.json', 'w') as f:
            json.dump(health_data, f, indent=2)

        # Define status para pr√≥ximos steps
        if health_data['is_up']:
            print('APP_STATUS=online')
            with open('app_status.txt', 'w') as f:
                f.write('online')
        else:
            print('APP_STATUS=offline')
            with open('app_status.txt', 'w') as f:
                f.write('offline')
        "

    - name: Module Availability Check
      run: |
        echo "üìö Verificando disponibilidade dos m√≥dulos..."
        python -c "
        import requests
        import json

        app_url = 'https://algoritmos-visualizador.streamlit.app'
        modules = ['1', '2', '3', '4', '5']  # M√≥dulos 1-5
        results = {}

        for module in modules:
            try:
                response = requests.get(f'{app_url}/?module={module}', timeout=15)
                results[f'module_{module}'] = {
                    'status': response.status_code,
                    'available': response.status_code == 200
                }
                print(f'üìñ M√≥dulo {module}: {\"‚úÖ\" if response.status_code == 200 else \"‚ùå\"} (HTTP {response.status_code})')
            except Exception as e:
                results[f'module_{module}'] = {
                    'status': None,
                    'available': False,
                    'error': str(e)
                }
                print(f'üìñ M√≥dulo {module}: ‚ùå Erro - {e}')

        with open('modules_check.json', 'w') as f:
            json.dump(results, f, indent=2)

        available_count = sum(1 for r in results.values() if r['available'])
        print(f'üìä M√≥dulos dispon√≠veis: {available_count}/{len(modules)}')
        "

    - name: Performance Analysis
      run: |
        echo "‚ö° Analisando performance..."
        python -c "
        import json
        import time

        # Simula m√∫ltiplas requisi√ß√µes para an√°lise de performance
        import requests

        app_url = 'https://algoritmos-visualizador.streamlit.app'
        times = []

        for i in range(3):  # 3 requisi√ß√µes de teste
            try:
                start = time.time()
                response = requests.get(app_url, timeout=20)
                elapsed = time.time() - start
                times.append(elapsed)
                print(f'üìà Teste {i+1}: {elapsed:.2f}s')
                time.sleep(1)  # Pequena pausa entre testes
            except Exception as e:
                print(f'üìà Teste {i+1}: ‚ùå Falhou - {e}')
                times.append(None)

        # Calcula m√©tricas
        valid_times = [t for t in times if t is not None]
        if valid_times:
            avg_time = sum(valid_times) / len(valid_times)
            min_time = min(valid_times)
            max_time = max(valid_times)

            perf_data = {
                'average_response_time': round(avg_time, 2),
                'min_response_time': round(min_time, 2),
                'max_response_time': round(max_time, 2),
                'success_rate': len(valid_times) / len(times)
            }

            print(f'üìä Performance: M√©dia {avg_time:.2f}s, Min {min_time:.2f}s, Max {max_time:.2f}s')

            with open('performance.json', 'w') as f:
                json.dump(perf_data, f, indent=2)
        "

    - name: Generate Comprehensive Report
      run: |
        echo "üìã Gerando relat√≥rio abrangente..."
        python -c "
        import json
        from datetime import datetime

        # Carrega dados das verifica√ß√µes anteriores
        try:
            with open('health_check.json', 'r') as f:
                health = json.load(f)
        except:
            health = {'error': 'Health check data not found'}

        try:
            with open('modules_check.json', 'r') as f:
                modules = json.load(f)
        except:
            modules = {'error': 'Modules check data not found'}

        try:
            with open('performance.json', 'r') as f:
                performance = json.load(f)
        except:
            performance = {'error': 'Performance data not found'}

        # Gera relat√≥rio
        report = {
            'timestamp': datetime.now().isoformat(),
            'app_url': 'https://algoritmos-visualizador.streamlit.app',
            'health_check': health,
            'modules_check': modules,
            'performance': performance,
            'overall_status': 'HEALTHY' if health.get('is_up', False) else 'UNHEALTHY'
        }

        # An√°lise de recomenda√ß√µes
        recommendations = []

        if health.get('response_time', 0) > 10:
            recommendations.append('‚ö†Ô∏è Alto tempo de resposta detectado - considere otimizar cache')
        elif health.get('response_time', 0) > 5:
            recommendations.append('‚ÑπÔ∏è Tempo de resposta moderado - monitorar tend√™ncia')

        available_modules = sum(1 for m in modules.values() if isinstance(m, dict) and m.get('available', False))
        total_modules = len([m for m in modules.keys() if m.startswith('module_')])

        if available_modules < total_modules:
            recommendations.append(f'‚ö†Ô∏è {total_modules - available_modules} m√≥dulo(s) com problema')

        if not recommendations:
            recommendations.append('‚úÖ Todos os sistemas funcionando normalmente')

        report['recommendations'] = recommendations

        # Salva relat√≥rio
        with open('deploy_report.json', 'w') as f:
            json.dump(report, f, indent=2)

        # Print resumo
        print('ÔøΩ === RELAT√ìRIO DE MONITORAMENTO ===')
        print(f'üïê {report[\"timestamp\"]}')
        print(f'üåê App: {report[\"app_url\"]}')
        print(f'üìä Status: {report[\"overall_status\"]}')
        print(f'‚ö° Tempo resposta: {health.get(\"response_time\", \"N/A\")}s')
        print(f'üìö M√≥dulos OK: {available_modules}/{total_modules}')
        print()
        print('üí° Recomenda√ß√µes:')
        for rec in recommendations:
            print(f'   {rec}')
        "

    - name: Upload Report as Artifact
      uses: actions/upload-artifact@v4
      with:
        name: deploy-report-${{ github.run_number }}
        path: |
          deploy_report.json
          health_check.json
          modules_check.json
          performance.json

    - name: Create Issue on Failure
      if: failure()
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: 'üö® Deploy Monitoring Alert - App Unhealthy',
            body: 'O monitoramento autom√°tico detectou problemas na aplica√ß√£o Streamlit Cloud. Verifique os logs e artefatos do workflow para mais detalhes.',
            labels: ['bug', 'deploy', 'monitoring']
          })

    - name: Success Notification
      if: success()
      run: |
        echo "‚úÖ Monitoramento conclu√≠do com sucesso!"
        echo "üìä Relat√≥rio gerado e artefatos salvos" then
          echo "‚ùå Streamlit App: Inacess√≠vel"
        else
          echo "‚ùì Streamlit App: Status desconhecido"
        fi

        echo "‚úÖ GitHub Actions: Funcionando"
        echo "‚úÖ Monitoramento: Ativo"
        echo "üîÑ Pr√≥xima verifica√ß√£o: $(date -d '+1 day' +'%Y-%m-%d 09:00 UTC')"
        echo ""
        echo "üåê URL da Aplica√ß√£o: https://algoritmos-visualizador.streamlit.app"
        echo "üìä Status HTTP: ${APP_STATUS:-desconhecido}"
