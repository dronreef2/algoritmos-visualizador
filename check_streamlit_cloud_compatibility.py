#!/usr/bin/env python3
"""
üß™ Verifica√ß√£o de Compatibilidade - Streamlit Cloud
===============================================

Script para verificar se a aplica√ß√£o est√° pronta para deploy no Streamlit Cloud.
"""

import sys
import os
from pathlib import Path

def main():
    """Verifica√ß√£o b√°sica de compatibilidade"""
    print("üß™ VERIFICA√á√ÉO DE COMPATIBILIDADE - STREAMLIT CLOUD")
    print("="*60)

    # Verifica arquivos cr√≠ticos
    critical_files = [
        'app_integrada.py',
        'requirements_streamlit_cloud.txt',
        '.streamlit/config.toml'
    ]

    print("üìÅ Verificando arquivos cr√≠ticos...")
    all_files_ok = True

    for file_path in critical_files:
        path = Path(file_path)
        if path.exists():
            print(f"   ‚úÖ {file_path}: OK")
        else:
            print(f"   ‚ùå {file_path}: N√£o encontrado")
            all_files_ok = False

    # Verifica depend√™ncias b√°sicas
    print("\nüì¶ Verificando depend√™ncias b√°sicas...")
    dependencies_ok = True

    try:
        import streamlit
        print(f"   ‚úÖ streamlit: {streamlit.__version__}")
    except ImportError:
        print("   ‚ùå streamlit: N√£o encontrado")
        dependencies_ok = False

    try:
        import torch
        print(f"   ‚úÖ torch: {torch.__version__}")
        cuda_available = torch.cuda.is_available()
        if cuda_available:
            print("   ‚úÖ CUDA: Dispon√≠vel")
        else:
            print("   ‚ö†Ô∏è  CUDA: N√£o dispon√≠vel (CPU-only)")
    except ImportError:
        print("   ‚ùå torch: N√£o encontrado")
        dependencies_ok = False

    # Status final
    print("\n" + "="*60)
    if all_files_ok and dependencies_ok:
        print("üéâ STATUS: ‚úÖ PRONTO PARA DEPLOY NO STREAMLIT CLOUD")
        print("\nüöÄ Para fazer deploy:")
        print("   1. Commit dos arquivos no GitHub")
        print("   2. Acesse: https://share.streamlit.io")
        print("   3. Configure:")
        print("      - Main file: app_integrada.py")
        print("      - Requirements: requirements_streamlit_cloud.txt")
        return True
    else:
        print("‚ö†Ô∏è  STATUS: ‚ùå PROBLEMAS DETECTADOS")
        print("   Verifique os arquivos e depend√™ncias acima.")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)

import sys
import os
import platform
import psutil
import time
from pathlib import Path

def check_system_resources():
    """Verifica recursos do sistema"""
    print("üîç Verificando recursos do sistema...")

    # CPU
    cpu_count = os.cpu_count()
    print(f"   CPU: {cpu_count} cores")

    # Mem√≥ria
    memory = psutil.virtual_memory()
    memory_gb = memory.total / (1024**3)
    print(f"   Mem√≥ria: {memory_gb:.1f} GB")

    # Disco
    disk = psutil.disk_usage('/')
    disk_gb = disk.total / (1024**3)
    print(f"   Disco: {disk_gb:.1f} GB")
    return {
        'cpu_count': cpu_count,
        'memory_gb': memory_gb,
        'disk_gb': disk_gb
    }

def check_dependencies():
    """Verifica depend√™ncias cr√≠ticas"""
    print("\nüì¶ Verificando depend√™ncias...")

    dependencies = [
        'streamlit',
        'torch',
        'numpy',
        'pandas',
        'plotly',
        'matplotlib',
        'PIL'
    ]

    results = {}
    for dep in dependencies:
        try:
            if dep == 'PIL':
                import PIL
                version = PIL.__version__
            else:
                module = __import__(dep)
                version = getattr(module, '__version__', 'unknown')
            print(f"   ‚úÖ {dep}: {version}")
            results[dep] = True
        except ImportError as e:
            print(f"   ‚ùå {dep}: N√£o encontrado - {e}")
            results[dep] = False

    return results

def check_pytorch_setup():
    """Verifica configura√ß√£o do PyTorch"""
    print("\nüß† Verificando PyTorch...")

    try:
        import torch
        print(f"   ‚úÖ PyTorch: {torch.__version__}")

        # Verifica CUDA
        cuda_available = torch.cuda.is_available()
        if cuda_available:
            print(f"   ‚úÖ CUDA: Dispon√≠vel ({torch.cuda.get_device_name()})")
        else:
            print("   ‚ö†Ô∏è  CUDA: N√£o dispon√≠vel (usando CPU)")

        # Testa tensor b√°sico
        x = torch.randn(10, 10)
        y = x @ x.t()
        print("   ‚úÖ Opera√ß√µes b√°sicas: OK")

        return {
            'torch_version': torch.__version__,
            'cuda_available': cuda_available,
            'basic_ops': True
        }

    except Exception as e:
        print(f"   ‚ùå PyTorch: Erro - {e}")
        return None

def check_module_imports():
    """Verifica importa√ß√£o dos m√≥dulos principais"""
    print("\nüìö Verificando m√≥dulos da aplica√ß√£o...")

    modules_to_test = [
        'app_integrada',
        'modulos_integrados',
        'cache_inteligente_moderno',
        'aprendizado_contextual_ui',
        'exercicios_praticos_ui',
        'mcp_tavily_integration'
    ]

    results = {}
    for module in modules_to_test:
        try:
            __import__(module)
            print(f"   ‚úÖ {module}: OK")
            results[module] = True
        except ImportError as e:
            print(f"   ‚ùå {module}: Erro - {e}")
            results[module] = False

    # Testa m√≥dulos avan√ßados (podem falhar sem GPU)
    advanced_modules = [
        'modulo_5_redes_neurais.neural_evolution',
        'modulo_5_redes_neurais.neural_sonification',
        'modulo_5_redes_neurais.neural_generative_art',
        'modulo_5_redes_neurais.neural_global_competitions'
    ]

    print("\nüöÄ Verificando m√≥dulos avan√ßados (PyTorch)...")
    for module in advanced_modules:
        try:
            __import__(module)
            print(f"   ‚úÖ {module}: OK")
            results[module] = True
        except Exception as e:
            print(f"   ‚ö†Ô∏è  {module}: {e}")
            results[module] = False

    return results

def check_file_structure():
    """Verifica estrutura de arquivos cr√≠tica"""
    print("\nüìÅ Verificando estrutura de arquivos...")

    critical_files = [
        'app_integrada.py',
        'requirements_streamlit_cloud.txt',
        '.streamlit/config.toml',
        'modulo_5_redes_neurais/',
        'cache_inteligente_moderno.py'
    ]

    results = {}
    for file_path in critical_files:
        path = Path(file_path)
        if path.exists():
            if path.is_dir():
                file_count = len(list(path.glob('*')))
                print(f"   ‚úÖ {file_path}: {file_count} arquivos")
            else:
                size_kb = path.stat().st_size / 1024
                print(f"   ‚úÖ {file_path}: {size_kb:.1f} KB")
                results[file_path] = True
        else:
            print(f"   ‚ùå {file_path}: N√£o encontrado")
            results[file_path] = False

    return results

def performance_test():
    """Teste b√°sico de performance"""
    print("\n‚ö° Teste de performance...")

    try:
        import torch
        import numpy as np

        # Teste CPU
        start_time = time.time()
        x = torch.randn(100, 100)
        for _ in range(100):
            y = torch.matmul(x, x)
        cpu_time = time.time() - start_time
        print(f"   ‚úÖ CPU time: {cpu_time:.3f}s")
        # Teste NumPy
        start_time = time.time()
        x_np = np.random.randn(100, 100)
        for _ in range(100):
            y_np = np.dot(x_np, x_np)
        numpy_time = time.time() - start_time
        print(f"   ‚úÖ NumPy time: {numpy_time:.3f}s")
        return {
            'cpu_time': cpu_time,
            'numpy_time': numpy_time,
            'performance_ok': cpu_time < 5.0  # Menos de 5s √© aceit√°vel
        }

    except Exception as e:
        print(f"   ‚ùå Performance test: {e}")
        return None

def generate_report(results):
    """Gera relat√≥rio final"""
    print("\n" + "="*60)
    print("üìä RELAT√ìRIO DE COMPATIBILIDADE - STREAMLIT CLOUD")
    print("="*60)

    # Status geral
    all_critical_ok = all([
        results['dependencies'].get('streamlit', False),
        results['dependencies'].get('torch', False),
        results['files'].get('app_integrada.py', False),
        results['files'].get('requirements_streamlit_cloud.txt', False)
    ])

    if all_critical_ok:
        print("üéâ STATUS: ‚úÖ PRONTO PARA DEPLOY")
    else:
        print("‚ö†Ô∏è  STATUS: ‚ùå PROBLEMAS CR√çTICOS DETECTADOS")

    # Resumo por categoria
    print("\nüìã RESUMO POR CATEGORIA:")
    print(f"   üîç Sistema: {len([r for r in results['system'].values() if r])}/{len(results['system'])} OK")
    print(f"   üì¶ Depend√™ncias: {len([r for r in results['dependencies'].values() if r])}/{len(results['dependencies'])} OK")
    print(f"   üß† PyTorch: {'‚úÖ' if results['pytorch'] else '‚ùå'}")
    print(f"   üìö M√≥dulos: {len([r for r in results['modules'].values() if r])}/{len(results['modules'])} OK")
    print(f"   üìÅ Arquivos: {len([r for r in results['files'].values() if r])}/{len(results['files'])} OK")
    print(f"   ‚ö° Performance: {'‚úÖ' if results['performance'] and results['performance']['performance_ok'] else '‚ùå'}")

    # Recomenda√ß√µes
    print("\nüí° RECOMENDA√á√ïES:")
    if not results['pytorch'] or not results['pytorch'].get('cuda_available', False):
        print("   ‚ö†Ô∏è  PyTorch sem GPU - funcionalidades avan√ßadas ser√£o limitadas")
        print("   üí° Considere arquitetura h√≠brida (Streamlit + AWS) para GPU")

    if results['performance'] and results['performance']['cpu_time'] > 2.0:
        print("   ‚ö†Ô∏è  Performance CPU baixa - otimize opera√ß√µes pesadas")
        print("   üí° Use @st.cache_data e reduza complexidade de c√°lculos")

    if not all(results['files'].values()):
        print("   ‚ùå Arquivos cr√≠ticos faltando - verifique deploy")
        print("   üí° Certifique-se que todos os arquivos est√£o no reposit√≥rio")

    print("\nüöÄ PARA DEPLOY:")
    print("   1. Fa√ßa commit dos arquivos no GitHub")
    print("   2. Acesse: https://share.streamlit.io")
    print("   3. Conecte o reposit√≥rio e configure:")
    print("      - Main file: app_integrada.py")
    print("      - Requirements: requirements_streamlit_cloud.txt")
    print("   4. Deploy autom√°tico!")

    print("\n" + "="*60)

def main():
    """Fun√ß√£o principal"""
    print("üß™ VERIFICA√á√ÉO DE COMPATIBILIDADE - STREAMLIT CLOUD")
    print("="*60)

    results = {}

    # Executa verifica√ß√µes
    results['system'] = check_system_resources()
    results['dependencies'] = check_dependencies()
    results['pytorch'] = check_pytorch_setup()
    results['modules'] = check_module_imports()
    results['files'] = check_file_structure()
    results['performance'] = performance_test()

    # Gera relat√≥rio
    generate_report(results)

    # Exit code baseado no status
    critical_ok = all([
        results['dependencies'].get('streamlit', False),
        results['dependencies'].get('torch', False),
        results['files'].get('app_integrada.py', False)
    ])

    sys.exit(0 if critical_ok else 1)

if __name__ == "__main__":
    main()
